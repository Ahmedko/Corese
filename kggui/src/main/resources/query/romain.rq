#
# Romain numbers extended datatype
# Olivier Corby - Wimmics Inria I3S - 2015
#
prefix dt: <http://ns.inria.fr/sparql-datatype/>
prefix ex: <http://ns.inria.fr/sparql-datatype/romain#>
prefix rm: <http://ns.inria.fr/sparql-extension/spqr/>
select ?res ?val  (rm:digit(?val) as ?dig) 
where {                           
  bind (  'II'^^dt:romain * 'X'^^dt:romain + 'V'^^dt:romain as ?res) 
  bind (maplist(ex:romain,  xt:iota(7)) as ?list)
  bind (apply (xt:plus, ?list) as ?val)
}
                  
export {
  function ex:equal(?x, ?y)        { (rm:digit(?x) = rm:digit(?y))} 
  function ex:diff(?x, ?y)         { (rm:digit(?x) != rm:digit(?y))}
  function ex:less(?x, ?y)         { (rm:digit(?x) < rm:digit(?y))}
  function ex:lessEqual(?x, ?y)    { (rm:digit(?x) <= rm:digit(?y))}
  function ex:greater(?x, ?y)      { (rm:digit(?x) > rm:digit(?y))}
  function ex:greaterEqual(?x, ?y) { (rm:digit(?x) >= rm:digit(?y))} 
  
  function ex:plus(?x, ?y)  { ex:romain(rm:digit(?x) + rm:digit(?y))}
  function ex:minus(?x, ?y) { ex:romain(rm:digit(?x) - rm:digit(?y))}
  function ex:mult(?x, ?y)  { ex:romain(rm:digit(?x) * rm:digit(?y))}
  function ex:divis(?x, ?y) { ex:romain(rm:digit(?x) / rm:digit(?y))} 
  
  function ex:romain(?x) { strdt(rm:romain(?x), dt:romain)}
 }