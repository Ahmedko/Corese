<?xml version="1.0" encoding="UTF-8"?>

<ClassDiagram name="Reverse engineered main.java.fr.inria.edelweiss.kgdqp.strategies 2015.03.17 13-52-33-951">
  <ClassDiagramComponents>
    <Class xPosition="20.0" yPosition="20.0" package="fr.inria.edelweiss.kgdqp.strategies" name="RemoteQueryOptimizerFilter" visibility="public">
      <Constructors/>
      <Fields/>
      <Methods>
        <Method name="getSparqlQuery" visibility="public" returnType="String">
          <Argument type="Node" name="gNode"/>
          <Argument type="List&lt;Node&gt;" name="from"/>
          <Argument type="Edge" name="edge"/>
          <Argument type="Environment" name="env"/>
        </Method>
      </Methods>
    </Class>
    <Class xPosition="320.0" yPosition="20.0" package="fr.inria.edelweiss.kgdqp.strategies" name="RemoteQueryOptimizerSimple" visibility="public">
      <Constructors/>
      <Fields/>
      <Methods>
        <Method name="getSparqlQuery" visibility="public" returnType="String">
          <Argument type="Node" name="gNode"/>
          <Argument type="List&lt;Node&gt;" name="from"/>
          <Argument type="Edge" name="edge"/>
          <Argument type="Environment" name="env"/>
        </Method>
      </Methods>
    </Class>
    <Class xPosition="620.0" yPosition="20.0" package="fr.inria.edelweiss.kgdqp.strategies" name="SourceSelectorWS" visibility="public">
      <Constructors/>
      <Fields>
        <Field name="logger" visibility="private" type="Logger" isStatic="true"/>
        <Field name="instance" visibility="private" type="SourceSelectorWS" isStatic="true"/>
      </Fields>
      <Methods>
        <Method name="getInstance" visibility="public" returnType="SourceSelectorWS" isStatic="true"/>
        <Method name="ask" visibility="public" returnType="boolean" isStatic="true">
          <Argument type="Edge" name="edge"/>
          <Argument type="RemoteProducerWSImpl" name="rp"/>
          <Argument type="Environment" name="env"/>
        </Method>
        <Method name="ask" visibility="public" returnType="boolean" isStatic="true">
          <Argument type="String" name="predicate"/>
          <Argument type="RemoteProducerWSImpl" name="rp"/>
          <Argument type="ASTQuery" name="ast"/>
        </Method>
        <Method name="getSparqlAsk" visibility="public" returnType="String" isStatic="true">
          <Argument type="Edge" name="edge"/>
          <Argument type="Environment" name="env"/>
        </Method>
        <Method name="getSparqlAsk" visibility="public" returnType="String" isStatic="true">
          <Argument type="String" name="predicate"/>
          <Argument type="ASTQuery" name="ast"/>
        </Method>
      </Methods>
    </Class>
    <Interface xPosition="920.0" yPosition="20.0" package="fr.inria.edelweiss.kgdqp.strategies" name="RemoteQueryOptimizer" visibility="public">
      <Methods>
        <Method name="getSparqlQuery" visibility="public" returnType="String" isAbstract="true">
          <Argument type="Node" name="gNode"/>
          <Argument type="List&lt;Node&gt;" name="from"/>
          <Argument type="Edge" name="edge"/>
          <Argument type="Environment" name="env"/>
        </Method>
      </Methods>
    </Interface>
    <Class xPosition="20.0" yPosition="420.0" package="fr.inria.edelweiss.kgdqp.strategies" name="ServiceGrouper" visibility="public">
      <Constructors>
        <Constructor name="ServiceGrouper" visibility="public">
          <Argument type="QueryProcessDQP" name="execDQP"/>
        </Constructor>
      </Constructors>
      <Fields>
        <Field name="logger" visibility="package" type="Logger"/>
        <Field name="execDQP" visibility="private" type="QueryProcessDQP"/>
      </Fields>
      <Methods>
        <Method name="visit" visibility="public" returnType="void">
          <Argument type="Query" name="query"/>
        </Method>
        <Method name="visit" visibility="public" returnType="void">
          <Argument type="ASTQuery" name="ast"/>
        </Method>
        <Method name="buildIndex" visibility="public" returnType="void">
          <Argument type="Exp" name="exp"/>
          <Argument type="HashMap&lt;Triple, ArrayList&lt;String&gt;&gt;" name="indexEdgeSource"/>
          <Argument type="HashMap&lt;String, ArrayList&lt;Triple&gt;&gt;" name="indexSourceEdge"/>
          <Argument type="ASTQuery" name="ast"/>
          <Argument type="ArrayList&lt;Triple&gt;" name="orderedTPs"/>
        </Method>
        <Method name="rewriteQueryWithServices" visibility="public" returnType="Exp">
          <Argument type="Exp" name="exp"/>
          <Argument type="ArrayList&lt;Exp&gt;" name="globalFilters"/>
          <Argument type="HashMap&lt;String, ArrayList&lt;Triple&gt;&gt;" name="indexSourceEdge"/>
          <Argument type="HashMap&lt;Triple, ArrayList&lt;String&gt;&gt;" name="indexEdgeSource"/>
          <Argument type="ArrayList&lt;Triple&gt;" name="orderedTPs"/>
        </Method>
        <Method name="getInitialRank" visibility="private" returnType="int">
          <Argument type="Exp" name="exp"/>
          <Argument type="ArrayList&lt;Exp&gt;" name="consecutiveTP"/>
        </Method>
        <Method name="countFreeVars" visibility="private" returnType="int">
          <Argument type="Exp" name="s"/>
        </Method>
        <Method name="getSparqlServices" visibility="public" returnType="Exp">
          <Argument type="ArrayList&lt;Exp&gt;" name="globalFilters"/>
          <Argument type="ArrayList&lt;Exp&gt;" name="consecutiveTPs"/>
          <Argument type="HashMap&lt;String, ArrayList&lt;Triple&gt;&gt;" name="indexSourceEdge"/>
          <Argument type="HashMap&lt;Triple, ArrayList&lt;String&gt;&gt;" name="indexEdgeSource"/>
          <Argument type="ArrayList&lt;Triple&gt;" name="orderedTPs"/>
        </Method>
        <Method name="getSparqlServicesWithOptionals" visibility="public" returnType="Exp">
          <Argument type="ArrayList&lt;Exp&gt;" name="globalFilters"/>
          <Argument type="ArrayList&lt;Exp&gt;" name="consecutiveTPs"/>
          <Argument type="HashMap&lt;String, ArrayList&lt;Triple&gt;&gt;" name="indexSourceEdge"/>
          <Argument type="HashMap&lt;Triple, ArrayList&lt;String&gt;&gt;" name="indexEdgeSource"/>
          <Argument type="ArrayList&lt;Triple&gt;" name="orderedTPs"/>
        </Method>
        <Method name="existsInSourceIndex" visibility="public" returnType="boolean">
          <Argument type="Triple" name="t"/>
          <Argument type="HashMap&lt;String, ArrayList&lt;Triple&gt;&gt;" name="indexSourceEdge"/>
        </Method>
        <Method name="dumpEdgeIndex" visibility="private" returnType="void">
          <Argument type="HashMap&lt;Triple, ArrayList&lt;String&gt;&gt;" name="indexEdgeSource"/>
        </Method>
        <Method name="dumpSourceIndex" visibility="private" returnType="void">
          <Argument type="HashMap&lt;String, ArrayList&lt;Triple&gt;&gt;" name="indexSourceEdge"/>
        </Method>
      </Methods>
    </Class>
    <Class xPosition="320.0" yPosition="420.0" package="fr.inria.edelweiss.kgdqp.strategies" name="RemoteQueryOptimizerFull" visibility="public">
      <Constructors/>
      <Fields>
        <Field name="logger" visibility="private" type="Logger" isStatic="true"/>
      </Fields>
      <Methods>
        <Method name="getSparqlQuery" visibility="public" returnType="String">
          <Argument type="Node" name="gNode"/>
          <Argument type="List&lt;Node&gt;" name="from"/>
          <Argument type="Edge" name="edge"/>
          <Argument type="Environment" name="env"/>
        </Method>
      </Methods>
    </Class>
    <Class xPosition="620.0" yPosition="420.0" package="fr.inria.edelweiss.kgdqp.strategies" name="RemoteQueryOptimizerBinding" visibility="public">
      <Constructors>
        <Constructor name="RemoteQueryOptimizerBinding" visibility="package"/>
      </Constructors>
      <Fields>
        <Field name="logger" visibility="private" type="Logger" isStatic="true"/>
      </Fields>
      <Methods>
        <Method name="getSparqlQuery" visibility="public" returnType="String">
          <Argument type="Node" name="gNode"/>
          <Argument type="List&lt;Node&gt;" name="from"/>
          <Argument type="Edge" name="edge"/>
          <Argument type="Environment" name="env"/>
        </Method>
      </Methods>
    </Class>
    <Class xPosition="920.0" yPosition="420.0" package="fr.inria.edelweiss.kgdqp.strategies" name="RemoteQueryOptimizerFactory" visibility="public">
      <Constructors/>
      <Fields/>
      <Methods>
        <Method name="createSimpleOptimizer" visibility="public" returnType="RemoteQueryOptimizer" isStatic="true"/>
        <Method name="createFilterOptimizer" visibility="public" returnType="RemoteQueryOptimizer" isStatic="true"/>
        <Method name="createBindingOptimizer" visibility="public" returnType="RemoteQueryOptimizer" isStatic="true"/>
        <Method name="createFullOptimizer" visibility="public" returnType="RemoteQueryOptimizer" isStatic="true"/>
      </Methods>
    </Class>
  </ClassDiagramComponents>
  <ClassDiagramRelations>
    <ImplementsRelation name="&lt;&lt;implements&gt;&gt;" source="RemoteQueryOptimizerBinding" target="RemoteQueryOptimizer"/>
    <ImplementsRelation name="&lt;&lt;implements&gt;&gt;" source="RemoteQueryOptimizerSimple" target="RemoteQueryOptimizer"/>
    <ImplementsRelation name="&lt;&lt;implements&gt;&gt;" source="RemoteQueryOptimizerFull" target="RemoteQueryOptimizer"/>
    <HasRelation name="instance" source="SourceSelectorWS" target="SourceSelectorWS" sourceCardinality="1..1" targetCardinality="1..1"/>
    <ImplementsRelation name="&lt;&lt;implements&gt;&gt;" source="RemoteQueryOptimizerFilter" target="RemoteQueryOptimizer"/>
    <UseRelation source="RemoteQueryOptimizerFactory" target="RemoteQueryOptimizer" sourceCardinality="1..1" targetCardinality="1..1"/>
    <UseRelation source="SourceSelectorWS" target="SourceSelectorWS" sourceCardinality="1..1" targetCardinality="1..1"/>
  </ClassDiagramRelations>
</ClassDiagram>
