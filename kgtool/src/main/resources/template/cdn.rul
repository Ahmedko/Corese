<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Thu Dec 10 10:51:33 CET 2015
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' 
  xmlns='http://ns.inria.fr/edelweiss/2011/rule#'>
<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>
template st:substart(?cent) {

  # st:call-template(cn:head, cn:head)
   
   st:call-template(cn:content, ?cent)   
        
   st:call-template(cn:sign, cn:sign)
   
 #  st:call-template(cn:tail, cn:tail)

}
where {
}  


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>
template cn:content(?c) {
  
    st:call-template(cn:head, ?c, ?title)
    
    st:call-template(cn:body, ?c)
   
    st:call-template(cn:tail, ?c, ?title)

}
where {
  ?c rdfs:label ?title
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
template cn:icon {

"<table class='margin'><tr>\n"

  group {
    "<td>" 
      "<a href='" ?i "'><img width='100' src='" ?i "' /></a>" 
    "</td>"
  }
  
"</tr></table>\n"

}
where { }
values ?i {



<http://3.bp.blogspot.com/-3tBevLpWI6E/UtK25pLm86I/AAAAAAAADf8/Tvhy3899Iwo/s320/P1060114.JPG>

<http://3.bp.blogspot.com/-glPooGU-Bds/VB3I6Tx7i2I/AAAAAAAAD4E/M-zPk22sl0w/s1600/P1080231.JPG>

<http://2.bp.blogspot.com/-Ff-vEDJ_wt0/UhDrGOTRTWI/AAAAAAAADXI/COMur2r2RFA/s1600/P1050690.JPG>

#<http://upload.wikimedia.org/wikipedia/commons/9/97/Arms_of_the_Prince_of_Piedmont.svg>

#<http://1.bp.blogspot.com/-xfvkf3qpAVk/Ur6oUGkaQpI/AAAAAAAADfI/j1nPxHUle2o/s320/20130720_142348.jpg> 

<http://4.bp.blogspot.com/--IQOU9yw56c/U-NJ_DmGbeI/AAAAAAAADuo/bbA84x01Lrc/s320/P1070402.JPG>

<http://4.bp.blogspot.com/-1ZjNtZQxXDo/U-NJq9ek6FI/AAAAAAAADug/t9fXCId1rQc/s1600/P1070386.JPG>

<http://2.bp.blogspot.com/-NHZ8BEAsovs/U-NI58kXiBI/AAAAAAAADuI/JejEaJq9pM0/s1600/P1070323.JPG>


}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>

template st:start {
   
   st:call-template(st:substart, (coalesce(st:get(st:uri), cn:XIV)))   
        
}
where {
}  


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn:   <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>

template cn:test(?p) {
   "<p>" str(?p) "</p>"
   
}
where {

  service <http://fr.dbpedia.org/sparql> {
    select * where {
      ?p a ?t
    } limit 1
  }
  
 
}
pragma {kg:query kg:detail true}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>

template  cn:table(?min, ?max) {

  "<tr class='" st:call-template(cn:style, ?d) "'>"

  "<th class='date'>" st:call-template(cn:wikidate, ?d)  "</th>"
  
   st:call-template(cn:row, ?d)
         
  "</tr>\n"

}
where {
  {select distinct ?d  where {
    values ?p { cn:date cn:begin } 
    ?uri ?p ?d 
  }}
  filter(?min <= ?d && ?d <= ?max)
}
order by asc(?d)

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>

template cn:hlink(?u, ?t) { 
  
  "<a href=\"" ?u "\">" ?t "</a>"

}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
template cn:list {
  """
  <table class='margin'>
  <tr>
  <td><a href='""" 
  st:protocol(concat(st:get(st:service), "?uri=http://fr.dbpedia.org/resource/Nice&profile=st:dbpedia")) 
  "'>Carte</a></td><td>&nbsp;</td>"

  group {
    "<td><a href='" st:misc(?query) "'>" str(?title) "</a></td><td>&nbsp;</td>"
  }
  
  """</tr>
  </table>
  """
}
where {

}
values (?query ?title){
  ("/data/query/cdnplace.rq" 	"Lieu")
  ("/data/query/cdnperson.rq" 	"Personne")
  ("/data/query/cdnfr.rq" 	"France")
  ("/data/query/cdneds.rq" 	"Savoie")
  ("/data/query/cdnmisc.rq" 	"Autre")
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Get list st:topic from profile.ttl st:param
#
prefix cn: <http://cdn.fr/schema/>
template cn:row(?d) {

  "<td>" 
  group {
       st:call-template(cn:date, ?d, ?topic)
  }    
  "</td>"

}
where {
  bind (st:get(st:definition) as ?def)
  bind (unnest(st:get(st:topic)) as ?e)
  graph ?def {
    ?e rdf:rest*/rdf:first ?topic
  }
  
}
group by ?e
         

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn:   <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix o:    <http://dbpedia.org/ontology/>

template cn:geticon {
   ?ic
}
where {

  service <http://fr.dbpedia.org/sparql> {
    ?in o:thumbnail ?ic
    #       ?in foaf:depiction ?ic
  }
    
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Generate Century Index
# Hypertext link may trigger Corese server 
# Answer using SPARQL Template Transformation
#
prefix cn: <http://cdn.fr/schema/>

template cn:index(?title) {

"<table class='margin'><tr>"

  if (bound(?before), 
    concat("<td><a href='", st:plink(?before), "'>Avant</a></td><td>&nbsp;&nbsp;</td>"), 
    "")
    
  st:call-template(cn:elem, ?title)
  
  if (bound(?after), 
    concat("<td><a href='", st:plink(?after), "'>Après</a></td>"), 
    "")  
    
"</tr></table>"


st:call-template(cn:list)   

}
where {

  ?century rdfs:label ?title ; 
    cn:start ?min 
       
  bind (if (?min = 1, 0, ?min) - 100 as ?be)
  bind (if (?min = -100, -99, ?min) + 100 as ?af)
  bind (coalesce(st:get(st:min), -1000) as ?fst)
  bind (coalesce(st:get(st:max),  3000) as ?rst)
  
  optional { ?before cn:start ?be filter (?be >= ?fst) }
  optional { ?after  cn:start ?af filter (?af <= ?rst) }
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Generate Century Index
# Hypertext link may trigger Corese server 
# Answer using SPARQL Template Transformation
#
prefix cn: <http://cdn.fr/schema/>

template cn:elem(?title) {

    "<td><a href='"  st:plink(?century) "'>" 
    
    "<span" ?class ">" ?date "</span>"
    
    "</a></td>"
    "<td>&nbsp;&nbsp;</td>"
 
}
where {

  bind (coalesce(st:get(st:min), -1000) as ?fst)
  bind (coalesce(st:get(st:max),  3000) as ?rst)
    
  ?century cn:start ?min ; cn:finish ?max ; rdfs:label ?date
  
  filter (?min >= ?fst && ?max <= ?rst)
  
  bind (if (?date = ?title, " class='bold'", "") as ?class)
     
}
order by ?min

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
template cn:body(?c) {
 
    """
    <table class='margin hcentury'>
    <tr class='head'> 
    <th>Date</th>"""
    
    st:call-template(cn:rowtitle, ?c)
    "</tr>"
    
    st:call-template(cn:table, ?min, ?max)

    "</table>"
    
}  
where {
   ?c cn:start ?min ; cn:finish ?max 
}

    

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:query {
  """
  <h3>Query</h3>
  <form method='post' action='"""
  
  st:get(st:service)
  
  """'>
    <textarea cols='60' rows='10' name='query'>"""

    st:get(st:query)
    
  """</textarea>
    <br/>
    <input type='submit' value='Submit'/>
  </form>
  """
}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
template cn:img(?i) {
  "<img width='75' src=\"" ?i "\"/>" 
}
where {
#  bind(?u as ?uri)
#  bind(?t as ?text)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Hypertext link trigger Corese server 
# Answer using SPARQL Template Transformation
#
prefix cn: <http://cdn.fr/schema/>

template st:servlet {

      #"/kgram/sparql/template" 
      st:get(st:service)
      "?query=" 
              
}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>
template cn:head(?c, ?title) {

  "<a name='" str(?title) "'></a>"
    
    "<h2 class='century'>" ?title "e Siècle</h2>"
  
    st:call-template(cn:icon, cn:icon)
    
    "<p>"
    st:call-template(cn:index,  ?title)
    "</p>"
    
}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>

template st:navlab(?u, ?t) { 
  
  "<a href='" 
  st:protocol(concat(st:get(st:service), "?uri=", replace(str(?u), "'", "%27"), "&profile=st:dbpedia"))
  "'>" ?t "</a>"

}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
prefix o:  <http://dbpedia.org/ontology/>

template cn:href(?r, ?u, ?t, ?i) {

  if (?img, "<div class='margin'>", "")
  
  if (?img, 
    concat(st:call-template(cn:img, ?i), "<br/>"), 
    "")
    
   if (isURI(?r) && ?isp, 
	st:call-template(st:navlab, ?r, ?t),
	st:call-template(cn:hlink, ?u, ?t))

  if (?img, "</div>", "")
}
where {

  bind ( exists { ?r a ?tt . filter (?tt in (foaf:Person, o:Place)) 
  } as ?isp )
  
  bind(bound(?i) && isURI(?i) as ?img)
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:profile {

}
where {}

function st:process(?x) {
    if (isLiteral(?x), xsd:string(?x), st:apply-templates(?x))
  }
    
  function st:default(?x) { 
    xsd:string(?x)
  }
    
   function st:protocol(?uri) {
    if (st:get(st:protocol, st:ajax), 
      concat("javascript:trans(\"", str(?uri), "\")"), 
      str(?uri))
  }
     
   function st:link(?uri) {
     concat(st:get(st:service),
      "?uri=", encode_for_uri(?uri),          
      coalesce(
	concat("&profile=",   st:get(st:profile)), 
	concat("&transform=", st:get(st:transform)), 
	""))
 }
  
  function st:misc(?name) { 
    st:protocol(
      concat(st:get(st:service), "?name=", st:get(st:server), ?name, "&transform=st:sparql%23core&profile=st:dbpedia"))
  }
  
  function st:plink(?uri) {
      st:protocol(st:link(?uri))
  }

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>

template  cn:date(?date, ?topic) {

  group { ?uri ; separator = "<br/>" } 

}
where {

 graph ?g { [] cn:topic ?topic . 
	    { ?uri cn:date ?date } union { ?uri cn:begin ?date }
	  }
 
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>

template cn:tail(?c, ?title) {

    "<p>"    
    st:call-template(cn:index,  ?title)        
    "</p>"
    
}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Get list st:period from profile.ttl st:param
#
prefix cn: <http://cdn.fr/schema/>
template cn:rowtitle(?c) {

      "<th>"   
	if (?label = "Antiquité", 
	  if (?max <= 500, str(?label), "&nbsp;"),
	  str(?label))
      "</th>"
   
}  
where {

  ?c cn:start ?min ; cn:finish ?max
   
  bind (unnest(st:get(st:text)) as ?label)
  
}
#values ?label {"Antiquité" "France" "Contexte" "Savoie, Piémont, Comté de Nice"}
    

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
template cn:style(?in) {
  if (?d <= 1000, "s09",
  if (?d <= 1100, "s10",
  if (?d <= 1200, "s11",
  if (?d <= 1300, "s12",
  if (?d <= 1400, "s13",
  if (?d <= 1500, "s14",
  if (?d <= 1600, "s15",
  if (?d <= 1700, "s16",
  if (?d <= 1800, "s17",
  if (?d <= 1900, "s18", "s19"))))))))))
}
where {
    bind(?in as ?d)
}
	

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>

template  cn:wikidate(?d) {

  "<a href='http://fr.wikipedia.org/wiki/" ?d "'>" ?d "</a>"

}
where {

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>
template cn:sign {

   st:call-template(cn:icon, cn:icon)
   
#   st:call-template(st:query)

   """
   <p>
   This page is generated from an <a href='http://www.w3.org/RDF'>RDF</a> Dataset using 
   <a href='http://ns.inria.fr/sparql-template'>SPARQL Template Transformation</a> and <a href='http://wimmics.inria.fr/corese'>Corese</a> server. The Transformation dynamically gets additional Linked Open Data from <a href='http://fr.dbpedia.org'>dbpedia.fr</a> using SPARQL 1.1 service.
   <br/>
   Most of the pictures are links to <a href='http://fr.wikipedia.org/'>Wikipedia</a>.
   </p>
   """
   now()
}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn:   <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix o:    <http://dbpedia.org/ontology/>
prefix w:   <http://fr.wikipedia.org/wiki/>
prefix r:   <http://fr.dbpedia.org/resource/>

template {
  if (bound(?link), 
    st:call-template(cn:href, ?in, ?link, ?ctx, ?ic), 
    ?ctx)
  " " ?c " " ?l
  
}
where {

  ?in cn:date ?d ; rdfs:label ?ctx .  
  optional { ?in cn:link ?lnk }
  optional { ?in rdfs:comment ?c }
  optional { ?in cn:list ?l }
  optional { ?in st:icon ?ii }
  
  bind (
    if (bound(?ii), ?ii,
    if (isURI(?in), st:call-template(cn:geticon, ?in), "")) 
    as ?ic)
    
  bind (
    if (isURI(?in) && strstarts(?in, r:), 
      concat(w:, (substr(?in, strlen(r:) + 1))),
      ?lnk) 
    as ?link)
      
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn:   <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>

template {
    st:call-template(cn:href, 
      ?in, coalesce(?link, ?in), ?mds, ?ic)
        
    coalesce(str(?cc), "")
  
}
where {
  ?in cn:begin ?d ; rdfs:label ?mds .  
  optional { ?in cn:link ?lnk }
  optional { ?in st:icon ?ii }
  optional { ?in rdfs:comment ?cc }
  
  bind (
    if (bound(?ii), ?ii,
    if (isURI(?in), st:call-template(cn:geticon, ?in), "")) 
    as ?ic)
    
   bind (
    if (isURI(?in) && strstarts(?in, r:), 
      concat(w:, (substr(?in, strlen(r:) + 1))),
      ?lnk) 
    as ?link)  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>

template {
    if (bound(?lnk), 
      st:call-template(cn:href, ?lnk, ?c), 
      ?c)
}
where {

  ?in rdf:rest*/rdf:first ?elem
  
  { ?elem rdfs:label ?c ; cn:link ?lnk }
  union 
  { ?elem rdfs:comment ?c }
}

]]>
</body>
</rule>

</rdf:RDF>
