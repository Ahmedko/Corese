<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Wed Sep 16 14:51:34 CEST 2015
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' 
  xmlns='http://ns.inria.fr/edelweiss/2011/rule#'>
<rule>
<body>
<![CDATA[
template st:insert(?uri) {
    "<a href='"  st:pplink(?uri, st:dbpediacopy) "'><button type='button'>Insert</button></a>" 
}
where {

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>
prefix p:  <http://fr.dbpedia.org/property/>

template st:substart(?x) {

  st:call-template(st:head, st:head)

  st:apply-templates(?x)
   
  st:call-template(st:tail, st:tail)
  
}
where { 
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix p:    <http://fr.dbpedia.org/property/>
prefix o:    <http://dbpedia.org/ontology/>

template st:descperson(?r) {

st:call-template(st:desctriple, 
  st:number(), ?r, ?p, ?title, if (?href, st:href, st:property))

}
where { 

  values (?p ?title) {
    (p:dateDeNaissance 	"Naissance")
    (p:dateDeDécès 	"Décès")
    (o:predecessor 	"Prédécesseur")
    (o:successor 	"Successeur")
    (o:father 		"Père")
    (o:mother 		"Mère")
    (o:spouse 		"Conjoints")
    (o:child 		"Enfants")
    (o:residence 	"Résidence")
    (rdfs:comment 	"Résumé")
    (o:wikiPageRedirects "Voir aussi")
    (o:wikipedia	"Wikipedia")
    (o:dbpedia		"DBpedia")
  }
  
  bind (if (?p in (o:wikipedia, o:dbpedia), true, false) as ?href)
  
  filter ( ?href || exists { ?r ?p ?v } )

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# SPARQL Template Transformation 
# Generate a HTML hypertext navigator on top of Linked Open Data
# such as dbpedia
#
# Olivier Corby - Wimmics INRIA I3S - 2014
#
template st:start {

  st:call-template(st:page)
  
}
where {

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:icon(?label, ?ic) {

  "<img width='250' alt=\"" str(?label) "\" src=\"" str(?ic) "\" />"

}
where {}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix p:    <http://fr.dbpedia.org/property/>
prefix o:    <http://dbpedia.org/ontology/>

template st:descresource(?r) {

  "<tr class='s" if (kg:even(st:number()), 0, 1) "'>"
  "<th class='left'>" str(?p) "</th><td>" 
  
   st:call-template(st:triple, ?r, ?p, ?v)  
  
  "</td></tr>"  
}
where { 
    ?r ?p ?v
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:property(?r, ?p) {

  if (isLiteral(?n), str(?n),
    st:call-template(st:display, ?n, coalesce(?ln, ?n)))
  
}
where { 

  ?r ?p ?n  
  optional { ?n rdfs:label ?ln }
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:profile {

  define (st:protocol(?uri) =
    if (st:get(st:protocol, st:ajax), 
      concat("javascript:trans(\"", str(?uri), "\")"), 
      str(?uri))
  )
  
  define (st:link(?uri) =
     concat(st:get(st:service),
      "?uri=", encode_for_uri(?uri),          
      coalesce(
	concat("&profile=",   st:get(st:profile)), 
	concat("&transform=", st:get(st:transform)), 
	""))
  ) 
  
  define (st:pplink(?uri, ?profile) =
     st:protocol(concat(st:get(st:service),
      "?uri=", encode_for_uri(?uri),          
      concat("&profile=",   ?profile)))
  )
   
  define (st:plink(?uri) =
    st:protocol(st:link(?uri))
  )
  
}
where {

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>
prefix p:  <http://fr.dbpedia.org/property/>

template st:page {

  st:call-template-with(st:server, st:head)

  st:call-template(st:selecttry)
   
  st:call-template-with(st:server, st:tail)
  
}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Link to external web site (eg Wikipedia)
#

template  st:href(?r, ?p) {

 "<a href=\"" 
    str(?v) 
  "\">"  
    str(?v) 
  "</a>"

}

where {
   ?r ?p ?v 
}
 

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:triple(?r, ?p, ?n) {

  if (isLiteral(?n), str(?n),
    st:call-template(st:display, ?n, coalesce(?ln, ?n)))
  
}
where { 

  ?r ?p ?n
  optional { ?n rdfs:label ?ln }
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Geolocate resource on a map given lat et long
#
prefix p: <http://fr.dbpedia.org/property/>
prefix o: <http://dbpedia.org/ontology/>

template st:locate {

  st:call-template(st:map, ?in, ?lat, ?lon)
  
}
where {
  ?in a o:Place 
  {select * where { 
  # let o:place first because limit 1
    { ?in o:place [ 
	p:longitude ?lon ;
	p:latitude  ?lat]   
    } 
    union
    {?in p:longitude ?lon ;
	 p:latitude  ?lat }     
  } limit 1}
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Geolocate resource on a map given lat et long
#

template st:map(?r, ?lat, ?lon) {

  if (st:get(st:protocol, st:ajax), "", 
  """<script src="https://maps.googleapis.com/maps/api/js?v=3.exp"></script>""")

"""
  <script>
  function callback() {
    var pos = new google.maps.LatLng("""  str(?lat) "," str(?lon) ");"
      
    """  
    var mapOptions = {zoom: 7, center: pos, mapTypeId: google.maps.MapTypeId.TERRAIN};
            
    var map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
    
    google.maps.event.addListener(map, 'click', 
    function( event ){
      alert( "p:latitude: " + event.latLng.lat() + " " + "; p:longitude: " + event.latLng.lng() ); 
    });
    
    var marker = new google.maps.Marker({ position: pos, map: map, icon: '/img/bmarker.png' });
"""
    
    st:call-template(st:locateall, ?r)
    
"}"

    if (st:get(st:protocol, st:ajax), "",
        "google.maps.event.addDomListener(window, 'load', callback);")

"""
  </script>
      
  <p id="map-canvas" style="height:800px"></p>
  """
}
where {
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix p:    <http://fr.dbpedia.org/property/>
prefix o:    <http://dbpedia.org/ontology/>
prefix r:    <http://fr.dbpedia.org/resource/>

template st:descplace(?r) {

st:call-template(st:desctriple, 
  st:number(), ?r, ?p, ?title, if (?href, st:href, st:property))

}
where { 

  values (?p ?title) {
    (rdfs:comment 	"Résumé")
    (p:nord		"Nord")
    (p:nordEst		"Nord Est")
    (p:est		"Est")
    (p:sudEst		"Sud Est")
    (p:sud		"Sud")
    (p:sudOuest		"Sud Ouest")
    (p:ouest		"Ouest")
    (p:nordOuest	"Nord Ouest")
    (p:latitude		"Latitude")
    (p:longitude	"Longitude")
    
    (o:wikipedia	"Wikipedia")
    (o:dbpedia		"DBpedia")
  }
  
  bind   (if (?p in (o:wikipedia, o:dbpedia), true, false) as ?href)
  filter (if (?p in (o:wikipedia, o:dbpedia), strstarts(?r, r:), true))
  filter ( ?href || exists { ?r ?p ?v } )

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>
prefix p:  <http://fr.dbpedia.org/property/>

template st:select {

  st:apply-templates(?x)
  
}
where {
  { ?x a foaf:Person } 
  union { ?x a o:Place }
  union { ?x a o:Resource }
  
 filter(?x = coalesce(st:get(st:uri), ?x))
}
limit 1

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Link to server
#
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>
prefix p:    <http://fr.dbpedia.org/property/>


template  st:display(?r, ?l) {

 "<a href='"  st:plink(?r)  "'>"  
    str(coalesce(?l, ?pr)) 
  "</a>"

}

where {
   bind (
   if (strstarts(?r, r:), concat(w:, (substr(?r, strlen(r:) + 1))), ?r) 
   as ?pr)   
}
 

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>
prefix p:  <http://fr.dbpedia.org/property/>

template st:default {
"<a href=\"" 
    str(?uri) 
  "\">"  
    str(?uri) 
  "</a>"
}
where {
    bind(st:get(st:uri) as ?uri)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>
prefix p:    <http://fr.dbpedia.org/property/>

template st:frame(?label, ?icon, ?body) {

  """
  <div style='text-align:center'>   
  <h2>"""  str(?label) """</h2> 
  </div>
  <p>
  <table>
  <tr style='vertical-align:top'>
  <td>
  """
  
  if (?icon = "", "", 
    st:call-template(st:icon, ?label, ?icon)  )
 
  """
  </td><td>&nbsp;<td/><td>
  <table>
  """  
  
  str(?body)
  
  """
  </table>
  </td>
  </tr>
  </table>
  </p>
  """


}
where {


    
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:desctriple(?n, ?r, ?p, ?title, ?temp) {

"<tr class='s" if (kg:even(?n), 0, 1) "'>"
  "<th class='left'>" str(?title) "</th><td>" 
  
   st:call-template(?temp, ?r, ?p)
   
"</td></tr>" 
  
}
where {} 

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>
prefix p:  <http://fr.dbpedia.org/property/>

template st:selecttry {

  if (bound(?t), 
    st:call-template(st:select),
    st:call-template(st:default))
  
}
where {
  optional { ?x a ?t }
}
limit 1

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Geolocate  resources on a map (except resource given lat et long)
#
prefix p: <http://fr.dbpedia.org/property/>
prefix o: <http://dbpedia.org/ontology/>
template st:locateall(?r) {

  "var pos" st:number() " = new google.maps.LatLng(" str(?lat) "," str(?lon) ");"
                  
  "var marker" st:number() 
  "= new google.maps.Marker({ position: pos" st:number() ", map: map, icon: '/img/smarker.png' });"
  
  "google.maps.event.addListener(marker" st:number() 
  ", 'click', function () {window.location.href = '"   st:plink(?in)   "';});"
  
}
where {

   bind (st:get(st:dataset) as ?g)
   graph ?g {
    ?in p:longitude ?lon ; p:latitude ?lat
    filter(?in != ?r)
    }
    
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>
prefix p:    <http://fr.dbpedia.org/property/>

template st:title(?r, ?l, ?i) {
 
  "<div style='text-align:center'>" 
  
  "<h2>"  str(?l) "</h2>"
  
 """<p>"""
    coalesce(str(?b), "")
    if (bound(?b) && bound(?d), " -- " , "")
    coalesce(str(?d), "")
  """</p>
  """
  
  "</div>"

}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>
prefix p:    <http://fr.dbpedia.org/property/>

template {

st:call-template(st:frame, ?label, coalesce(?ic, ""), 
   st:call-template(st:descperson, ?in))
 
}
where {

  ?in a foaf:Person
  minus { ?in a o:Resource }
    
  ?in rdfs:label ?label 
        
  optional { ?in o:thumbnail  ?ic  }
  
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>
prefix p:    <http://fr.dbpedia.org/property/>

template {

  st:call-template(st:frame, ?label, coalesce(?ic, ""), 
     st:call-template(st:descresource, ?in))


}
where {

  ?in a o:Resource
    
  ?in rdfs:label ?label 
  filter(lang(?label) = 'fr')
        
  optional { ?in o:thumbnail  ?ic  }
    
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>
prefix p:    <http://fr.dbpedia.org/property/>

template {

  st:call-template(st:frame, ?label, coalesce(?ic, ""), 
     st:call-template(st:descplace, ?in))
   
  st:call-template(st:locate, ?in)

}
where {

  ?in a o:Place
  minus { ?in a o:Resource }
    
  ?in rdfs:label ?label 
  	      
  optional { ?in o:thumbnail  ?ic  }
    
}

]]>
</body>
</rule>

</rdf:RDF>
