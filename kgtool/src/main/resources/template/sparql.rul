<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Thu Jan 07 13:56:25 CET 2016
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' 
  xmlns='http://ns.inria.fr/edelweiss/2011/rule#'>
<rule>
<body>
<![CDATA[
#
# Generate HTML from SPARQL Query Results
# RDF is either construct where graph or 
# select where in W3C DAWG result-set RDF vocabulary
#
# Olivier Corby - Wimmics Inria I3S - 2015
#

template st:sparql {

  st:call-template-with(st:server, st:head)
   
  st:call-template(st:query, coalesce(st:get(st:query), ""))  
  
  st:call-template(st:page)
    
  st:call-template-with(st:server, st:tail)

}
where {
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Generate HTML from SPARQL Query Results
# RDF is either construct where graph or 
# select where in W3C DAWG result-set RDF vocabulary
#
# Olivier Corby - Wimmics Inria I3S - 2015
#

template st:start {

  st:call-template(st:sparql)

}
where {

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix rs: <http://www.w3.org/2001/sw/DataAccess/tests/result-set#>
template st:th {
 
    "<th>" str(?v) "</th>" ; separator = " "
 
}
where {
  ?x rs:resultVariable ?v
}
order by ?v

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Generate HTML from SPARQL Query Results
# RDF is either construct where graph or 
# select where in W3C DAWG result-set RDF vocabulary
#
# Olivier Corby - Wimmics Inria I3S - 2015
#

template st:dataset {
  str(?res)
}
where {  
  graph eng:dataset {
    bind (st:apply-templates-with(st:sparql) as ?res)
  }
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:link(?uri, ?title) {
   "<a href='"  str(?uri) "'>" str(?title) "</a>"
}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Utility template to be used by another transformation to
# integrate SPARQL Query Results without headings
#
template st:result {
   
  st:call-template(st:page)
      
}
where {
   bind (st:set(st:profile, coalesce(st:get(st:profile), st:sparql)) as ?p)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix rs: <http://www.w3.org/2001/sw/DataAccess/tests/result-set#>
template st:table {

 "<tr class='s" 
   if (kg:even(st:number()), 1, 0)
 "'>"
 
  "<th>"  st:number() "</th>"
  
    st:apply-templates(?s)
 
 "</tr>"
 
}
where {
  ?x rs:solution ?s 
  ?s rs:index ?i
  
}
order by ?i

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Generate link for URI
#
template st:display(?x) {
  if (! bound(?profile)){ 
    st:call-template(st:esc, ?x) 
  }
  else if (?profile = st:std){ 
    st:call-template(st:linkesc, ?x) 
  }
  else if (st:lod(?x)){
    st:call-template(st:linkesc, ?x)
  }
  else { 
    st:call-template(st:linkprofile, ?x) 
  }
          
}
where {
      bind (st:get(st:profile) as ?profile)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Trap select * where {} solution as there is no variable (see solution.rq)
#
template st:default {

}
where {

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix rs: <http://www.w3.org/2001/sw/DataAccess/tests/result-set#>

template st:pageask {
"""
  <h3>Result</h3>
  <p>
  """      
  ?b  
  "</p>"
}
where {
  ?r rs:boolean ?b
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:linkprofile(?x) {

  if (isURI(?x), 
    st:call-template(st:link, 
      coalesce(
	#st:call-template(st:transform, ?x), 
	st:plink(?x),
	encode_for_uri(?x)),
      ?e),
    str(?e))
    
}
where {

  bind (st:call-template(st:esc, ?x) as ?e)

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:pageselect {
   
  st:call-template(st:open)
  
  st:call-template(st:table)
  
  st:call-template(st:close)
    
}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:transform(?x) {

    st:get(st:service) "?uri=" encode_for_uri(?x) "&profile=" st:get(st:profile)
    
}
where {

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:close {
  
  "</table>"
   
}
where {

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:query(?q) {
  """
  <h3>Query</h3>
  <form method='post' id='sparql' action='"""  st:get(st:service)  """'>
  
   <select name="profile">"""
   
   if (bound(?prof) && ?prof not in (st:sparql, st:std),
    concat("<option value='", str(?prof), "'>Local</option>"),
    "")
   
   """
    <option value="st:sparql">LDP</option>
    <option value="st:std">STD</option>
   </select> 
  
    <br/>
    <textarea cols='60' rows='10' name='query'>"""str(?q)
    
  """</textarea>
    <br/>
  """  
   # st:call-template-with(st:server, st:submit, "sparql", "Submit", coalesce(st:get(st:protocol), st:std))
       
   "<input type='submit' value='submit'"  st:call-template-with(st:server, st:submit)  " />"
   
    
  """  
  </form>
  """
}
where {
  bind (st:get(st:profile) as ?prof)

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Generate HTML from SPARQL Query Results
# RDF is either construct where graph or 
# select where in W3C DAWG result-set RDF vocabulary
#
# Olivier Corby - Wimmics Inria I3S - 2015
#

template st:graph {

  st:call-template(st:head)
  
  st:call-template(st:banner)
 
  st:call-template(st:query, coalesce(st:get(st:query), ""))  
  
  st:call-template(st:pagecons)
    
  st:call-template(st:tail)
}
where {  
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:opencons {

  """
  <h3>Result</h3>
  <table>
  <tr class='s1'>
  <th></th><th></th><th>subject</th><th>property</th><th>object</th><th></th>
  </tr>
  """
  
}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:profile {
  
}
where {}
  
  # LOD URI hypertext link generated as is (see display.rq)
  # set by profile.ttl : st:param [ st:lod (URI) ]
  function st:lod(?x){
     coalesce(mapany(rq:strstarts, ?x, st:get(st:lod)), false)
  }
  
  function st:display(?x){
    let (?profile = coalesce(st:get(st:profile), st:null)){
      if (?profile = st:null){ 
	st:call-template(st:esc, ?x) 
      }
      else if (?profile = st:std){ 
	st:call-template(st:linkesc, ?x) 
      }
      else if (st:lod(?x)){
	st:call-template(st:linkesc, ?x)
      }
      else { 
	st:call-template(st:linkprofile, ?x) 
      }
    }
  }


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix rs: <http://www.w3.org/2001/sw/DataAccess/tests/result-set#>
template st:decl {

  """
  <h3>Result</h3>
  <table>
  """
  
 "<tr class='s1'><td/>"
 
  st:call-template(st:th)
  
 "</tr>\n"
}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix rs: <http://www.w3.org/2001/sw/DataAccess/tests/result-set#>

template st:page {
   
  st:call-template(?page)
      
}
where {
  bind (
    if (exists { ?x a rs:ResultSet }, 
      if (exists { ?x rs:boolean ?b }, st:pageask, st:pageselect),
      st:pagecons) 
    as ?page)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:pagecons {
   
  st:call-template(st:opencons)
  
  st:call-template(st:tablecons)
  
  st:call-template(st:close)
    
}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:esc(?x) {

  str(?tt)
    
}
where {

   bind(st:turtle(?x) as ?t)
   
   bind (replace(?t, "<", "&lt;") as ?tt)
   
   bind(
    if (isURI(?x) && strstarts(?t, "<"), str(?x), ?t) 
    as ?d) 
    
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
#  Get an optional icon from the dataset and display it
#
template st:show(?x) {
    "<img width='35' src='"  str(?l)   "' />" 
#    st:call-template(st:show2, ?x)
}
where {
  bind (st:get(st:dataset) as ?g)
  graph ?g { 
    { ?x st:icon ?l }  
    union { ?x a ?t . ?t st:icon ?l }  
  }
}
limit 1

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:tablecons2 {

 "<tr class='s" 
   if (kg:even(st:number()), 1, 0)
 "'>"
 "<th>"      st:number()
 "</th><td>" st:call-template(st:show,    ?x) 
 "</td><td>" st:display(?x)
 "</td><td>" st:call-template(st:tablecons3, ?x)
 "</td>"
 "</tr>"
 
}
where {
  select distinct ?x where {
    ?x ?p ?y
    bind (st:get(st:uri) as ?uri)
    filter (if (bound(?uri), ?uri in (?x, ?p, ?y), true))
    }
}
order by ?x 

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Utility template to be used by another transformation to
# integrate SPARQL Query Results without headings
#
template st:test {
  @<h2>{ "Test" } 
  st:call-template(st:page)
      
}
where {
   bind (st:set(st:profile, coalesce(st:get(st:profile), st:sparql)) as ?p)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix rs: <http://www.w3.org/2001/sw/DataAccess/tests/result-set#>
template st:open {

  """
  <h3>Result</h3>
  <table>
  """
  
 "<tr class='s1'><td/>"
 
  st:call-template(st:th)
  
 "</tr>\n"
}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Generate HTML from SPARQL Query Results
# RDF is either construct where graph or 
# select where in W3C DAWG result-set RDF vocabulary
#
# Olivier Corby - Wimmics Inria I3S - 2015
#

template st:core {

  st:call-template-with(st:server, st:header)
    
  st:call-template(st:page)
    
  st:call-template-with(st:server, st:tail)

}
where {
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:tablecons3(?x) {
"<table>"
group  {
 "<tr>"
 "<td>" st:display(?p) 
 "</td><td>" st:display(?y) 
 "</th><td>" st:call-template(st:show,    ?y) 
 "</td>"
 "</tr>"
 }
 "</table>"
 
}
where {
  ?x ?p ?y
  bind (st:get(st:uri) as ?uri)
  filter (if (bound(?uri), ?uri in (?x, ?p, ?y), true))
}
order by ?x ?p ?y

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
#  Get an optional icon from the dataset and display it
#
template st:show2(?x) {
    st:display(?y) 
}
where {
  bind (st:get(st:dataset) as ?g)
  graph ?g { 
     ?x rdfs:seeAlso ?y   
  }
}
limit 1

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:linkesc(?x) {

  if (isURI(?x), 
    st:call-template(st:link, ?x, ?e),
    str(?e))
    
}
where {

  bind (st:call-template(st:esc, ?x) as ?e)
    
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:tablecons {

 "<tr class='s" 
   if (kg:even(st:number()), 1, 0)
 "'>"
 "<th>"      st:number()
 "</th><td>" st:call-template(st:show,    ?x) 
 "</td><td>" st:display(?x) 
 "</td><td>" st:display(?p) 
 "</td><td>" st:display(?y) 
 "</th><td>" st:call-template(st:show,    ?y) 
 "</td>"
 "</tr>"
 
}
where {
  ?x ?p ?y
  bind (st:get(st:uri) as ?uri)
  filter (if (bound(?uri), ?uri in (?x, ?p, ?y), true))
}
order by ?x ?p ?y



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix rs: <http://www.w3.org/2001/sw/DataAccess/tests/result-set#>
template  {
 
    "<td>"  
    coalesce(st:display(?val), "&nbsp;")
    "</td>" ; separator = " "
  
}
where {
  ?x rs:solution ?in
  ?x rs:resultVariable ?var 
  
  optional {
    ?in rs:binding [ rs:variable ?var ; rs:value ?val ]
  }
  
}
order by ?var

]]>
</body>
</rule>

</rdf:RDF>
