<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Thu Sep 17 14:55:37 CEST 2015
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' 
  xmlns='http://ns.inria.fr/edelweiss/2011/rule#'>
<rule>
<body>
<![CDATA[
template st:enum(?year, ?f, ?l) {
"<tr style='vertical-align:top'>"
group {
  "<td>"

  st:call-template(st:monthtab, ?year, ?month) 

  "</td>"
  "<td>&nbsp;&nbsp;</td>"
}
"</tr>\n"
}
where {

    bind (unnest(xt:iota(?f, ?l)) as ?month)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cal: <http://ns.inria.fr/sparql-extension/calendar/>
template st:month(?y, ?m) {

    "<h3 style='text-align:center'>" cal:month(?m) "</h3>"
    
    "<pre>"
    "Mo Tu We Th Fr Sa Su \n"
    
    group {
    
        if (?n = 1, xt:space(?first - 1), "")
        xt:pretty(?n) 
        #st:call-template(st:date, ?date) " " 
        if (?jour = "Sunday", "\n", "")
        
        ; separator = ""
    }
    
    if (?first + ?days - 1 < 35 , "\n ", "")
    # additional space when last day is sunday (because \n alone fails)
    if (?first + ?days - 1 = 35 && ?last = 7, " ", "")
    
    "</pre>"
     
    ; separator = "\n"                   
}
where {
    bind (cal:days(?y, ?m) as ?days)
    bind (cal:num(xt:day(xsd:date(concat(?y, "-", ?m, "-", 1)))) 
    as ?first)
    bind (cal:num(xt:day(xsd:date(concat(?y, "-", ?m, "-", ?days)))) 
    as ?last)
    bind (unnest(xt:iota(?days)) as ?n)
    bind (xsd:date(concat(?y, "-", ?m, "-", ?n)) as ?date)
    bind (xt:day(?date) as ?jour)  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:start {

  st:call-template(st:head, ?year)

  st:call-template(st:main, ?year)
  
  st:call-template(st:content, ?year)
  
  st:call-template(st:tail)

}
where {
  bind (st:get(st:uri) as ?uri)
  bind (st:set(st:year, xsd:integer(substr(?uri, strlen(st:) + 2))) as ?year)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:main(?year) {

"<p style='text-align:center;'><table>" 

    st:call-template(st:calendar, ?year)
    
"</table></p>"
}
where {
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cal: <http://ns.inria.fr/sparql-extension/calendar/>
template st:agenda {
"<pre>"
    "\n" cal:month(?m) "\n"
    "Mo Tu We Th Fr Sa Su \n"
    group {
        if (?n = 1, xt:space(cal:num(?jour) - 1), "")
        if (?n < 10, " ", "") ?n " "
        if (?jour = "Sunday", "\n", "")
        ; separator = ""
    }
"</pre>"
    
    ; separator = "\n"                   
}
where {
    bind (unnest(xt:iota(12)) as ?m)
    bind (unnest(xt:iota(cal:days(?y, ?m))) as ?n)
    bind (xsd:date(concat(?y, "-", ?m, "-", ?n)) as ?day)
    bind (xt:day(?day) as ?jour)
    bind (define(xt:space(?n) = 
      if (?n = 0, "", concat("   " , xt:space(?n - 1)))) 
    as ?sp)
}
group by ?m
order by ?m
values ?y { 2015 }

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix o: <http://dbpedia.org/ontology/>
template st:date(?date) {
   ?c
}
where {
   select ?date (count(*) as ?c)  where {
      ?x ?p ?date  
 }

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:calendar(?year) {

st:call-template(st:enum, ?year, 1, 3)  
st:call-template(st:enum, ?year, 4, 6)  
st:call-template(st:enum, ?year, 7, 9)   
st:call-template(st:enum, ?year, 10, 12) 
  
}
where {

    
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cal: <http://ns.inria.fr/sparql-extension/calendar/>
template st:monthtab(?y, ?m) {

    "<h3 style='text-align:center'>" cal:month(?m) "</h3>"
    
    "<table class='pre'>"
    "<tr>" st:call-template(st:title)
    "</tr>"

    "<tr>"
    
    group {
    
        if (?n = 1, xt:td(?first - 1), "")
        
        "<td style='text-align:right'>" 
         
        if (?b, concat("<a href='#", str(?date), "'>"), "") 
        ?n 
        if (?b, "</a>", "")
        
        "</td>"
        
        #st:call-template(st:date, ?date) " " 
        
        if (?day = "Sunday", "</tr>\n<tr>", "")
        
        ; separator = ""
    }
    
    "</tr>"
    
    if (?first + ?days - 1 <= 35 , "<tr><td>&nbsp;</td></tr>", "")
    
    "</table>"
     
}
where {
    bind (cal:days(?y, ?m) as ?days)
    bind (cal:num(xt:day(cal:date(?y, ?m, 1))) as ?first)
    bind (unnest(xt:iota(?days)) as ?n)
    bind (cal:date(?y, ?m, ?n) as ?date)
    bind (xt:day(?date) as ?day) 
    bind (exists { ?x ?p ?dd 
      filter (datatype (?dd) in (xsd:date, xsd:dateTime)) 
      filter (year(?dd) = year(?date) 
      && month(?dd) = month(?date) 
      && day(?dd) = day(?date)) } 
    as ?b)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cal: <http://ns.inria.fr/sparql-extension/calendar/>
template st:content(?year) {

  "<a name=" str(?dd) "/>"
  "<h4>" str(?dd) "</h4>"  
  "<p>"
  
  group {
    "<a href='" 
    #str(?x) 
    st:protocol(concat(st:get(st:service), "?profile=st:dbpedia&uri=", encode_for_uri(?x)))
    "'>" str(?x) "</a>"  
    
    ; separator = "<br/>"
  }

  "</p>"
}
where { 
  {select distinct ?x ?dd ?date 
  where {
    ?x ?p ?date 
    filter (datatype(?date) in (xsd:date, xsd:dateTime)) 
    bind (cal:date(year(?date), month(?date), day(?date)) as ?dd)
  }}
  filter (year(?date) = ?year)
}
group by ?date
order by ?date 

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cal: <http://ns.inria.fr/sparql-extension/calendar/>
template st:profile {

      define(xt:space(?n) = 
         if (?n = 0, "", concat("   " , xt:space(?n - 1)))
      )
      
       define(xt:td(?n) = 
         if (?n = 0, "", concat("<td/>" , xt:td(?n - 1)))
      ) 
      
       define (st:protocol(?uri) =
    if (st:get(st:protocol, st:ajax), 
      concat("javascript:trans(\"", str(?uri), "\")"), 
      str(?uri))
  )
  
  define (st:link(?uri) =
     concat(st:get(st:service),
      "?uri=", encode_for_uri(?uri),          
      coalesce(
	concat("&profile=",   st:get(st:profile)), 
	concat("&transform=", st:get(st:transform)), 
	""))
  ) 
  
  define (st:pplink(?uri, ?profile) =
     st:protocol(concat(st:get(st:service),
      "?uri=", encode_for_uri(?uri),          
      concat("&profile=",   ?profile)))
  )
   
  define (st:plink(?uri) =
    st:protocol(st:link(?uri))
  )
  
  define (xt:pretty(?n) = 
    if (?n < 10, concat(" ", ?n), ?n) 
  )
                  
}
where {
}
    

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:head(?year) {

"<h1 style='text-align:center'>"

"<a href='" st:plink(concat(?uri,  (?year - 1))) "'>"  
"<span style='font-size:80%'>" (?year - 1)  "</span>"   "</a>"

"  -  " str(?year)  "  -  "

"<a href='" st:plink(concat(?uri,  (?year + 1))) "'>"  
"<span style='font-size:80%'>"  (?year + 1) "</span>"    "</a>"


"</h1>"
   
}
where {

bind ("http://ns.inria.fr/sparql-template/y" as ?uri)
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:title {
  "<td style='text-align:right'> &nbsp; " str(?t) "</td>"
  ; separator = ""
}
where {
values ?t { "Mo" "Tu" "We" "Th" "Fr" "Sa" "Su" }
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {

"<p>Calendar generated by a STTL transformation " now() "</p>"

}
where {}

]]>
</body>
</rule>

</rdf:RDF>
