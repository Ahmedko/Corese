<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Thu Oct 27 18:22:48 CEST 2016
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' 
  xmlns='http://ns.inria.fr/edelweiss/2011/rule#'>
<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:equals1 (?shape, ?sh, ?vis, ?s, ?p, ?q, ?o){
  sh:safe(?shape, ?sh, ?suc)
}
where {

  bind (sh:path(?shape, ?s, ?p) as ?l1)
  bind (sh:path(?shape, ?s, ?q) as ?l2)
  
  values ?o { unnest(?l1) }  
  bind (xt:member(?o, ?l2) as ?suc)
  
  bind (st:report(sh:equals, ?sh, ?shape, ?s, ?p, ?o, ?suc, ?vis) as ?b)
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:not (?shape, ?sh, ?vis, ?s, ?p, ?cst, ?o){
  sh:safe(?shape, ?sh, ?suc)
}
where {
  values ?o { unnest(sh:path(?shape, ?s, ?p)) }

  bind (! sh:hasPath(?shape, ?cst, false, ?s, ?p, ?o) as ?suc)
  
  bind (st:report(sh:shape, ?sh, ?shape, ?s, ?suc, ?vis) as ?b)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:disjoint (?shape, ?sh, ?vis, ?s, ?p, ?q, ?o){
  sh:safe(?shape, ?sh, ?suc)
}
where {

  bind (sh:path(?shape, ?s, ?p) as ?l1)
  bind (sh:path(?shape, ?s, ?q) as ?l2)
  
  values ?o { unnest(?l1) }  
  bind (! xt:member(?o, ?l2) as ?suc) 
  
  bind (st:report(sh:disjoint, ?sh, ?shape, ?s, ?p, ?o, ?suc, ?vis) as ?b)
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:equals2 (?shape, ?sh, ?vis, ?s, ?p, ?q, ?o){
  sh:safe(?shape, ?sh, ?suc)
}
where {

  bind (sh:path(?shape, ?s, ?p) as ?l1)
  bind (sh:path(?shape, ?s, ?q) as ?l2)
  
  values ?o { unnest(?l2) }  
  bind (xt:member(?o, ?l1) as ?suc)
  
  bind (st:report(sh:equals, ?sh, ?shape, ?s, ?q, ?o, ?suc, ?vis) as ?b)
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:equals (?shape, ?sh, ?vis, ?s, ?p, ?q, ?o){
  if (bound(?o), 
    st:call-template(?oper, ?shape, ?sh, ?vis, ?s, ?p, ?q, ?o),
    st:call-template(?oper, ?shape, ?sh, ?vis, ?s, ?p, ?q))
}
where {

  values ?oper {sh:equals1 sh:equals2}

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:lessThanOrEquals(?shape, ?sh, ?vis, ?s, ?p, ?q, ?o){
  sh:safe(?shape, ?sh, ?suc)
}
where {

  ?s ?p ?o ; ?q ?v
  
  bind (coalesce(?o <= ?v, false) as ?suc)
    
  bind (st:report(sh:lessThanOrEquals, ?sh, ?shape, ?s, ?q, ?o, ?suc, ?vis) as ?b)
  
}
 

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:hasValue (?shape, ?sh, ?vis, ?s, ?p, ?v, ?o){
  sh:safe(?shape, ?sh, ?suc)
}
where {

  bind ( exists {
    values ?o { unnest(sh:path(?shape, ?s, ?p)) }
    filter coalesce(?o = ?v, false) }
  as ?suc)
  
  
  bind (st:report(sh:hasValue, ?sh, ?shape, ?s, ?p, ?v, ?suc, ?vis) as ?b)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template st:profile {}
where {}

function st:aggregate(?x) {
  st:agg_and(?x)
}

function st:optimize(?shape, ?sh){
    true
}







]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:or (?shape, ?sh, ?vis, ?s, ?p, ?or, ?o) {
    sh:safe(?shape, ?sh, ?suc)
}
where {
  
    values ?o { unnest(sh:path(?shape, ?s, ?p)) }
    
    bind (sh:or(sh:hasPath, ?or, ?s, ?p, ?o, ?shape) as ?count)
	bind (! bound(?count) AS ?failure) .
	bind ( IF (?failure, false, ?count)  as ?suc)

    bind (st:report(sh:or, ?sh, ?shape, ?s,  ?suc, ?vis) as ?b)
  
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:pattern (?shape, ?sh, ?vis, ?s, ?p, ?exp, ?o) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
  graph ?shape {  
    ?sh sh:pattern ?exp   
    optional { ?sh sh:flags ?flag }
  }
  values ?o { unnest(sh:path(?shape, ?s, ?p)) }
  bind ( 
    coalesce(
        ! isBlank(?o) && 
        if (bound (?flag), regex(?o, ?exp, ?flag), regex(?o, ?exp)), 
        false) 
  as ?suc )

  bind (st:report(sh:pattern, ?sh, ?shape, ?s, ?p, ?o, ?suc, ?vis) as ?b)
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:maxCount (?shape, ?sh, ?vis, ?s, ?p, ?m, ?o){
  sh:safe(?shape, ?sh, ?suc)
}
where {

  bind (xt:size(sh:path(?shape, ?s, ?p)) as ?val) 
  bind (?val <= ?m    as ?suc) 
  
  bind (st:report(sh:maxCount, ?sh, ?shape, ?s, ?p, ?val, ?suc, ?vis) as ?b)
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:uniqueLang (?shape, ?sh, ?vis, ?s, ?p, ?l, ?o){
  sh:safe(?shape, ?sh, ?suc)
}
where {
 
  bind (sh:path(?shape, ?s, ?p) as ?values)
  values ?o { unnest(?values) }
  
  bind (lang(?o) as ?lang)
  filter (bound(?lang) && ?lang != "")
  
  bind (! mapfind(sh:sameLang, ?o, ?values) as ?suc)
  
  bind (st:report(sh:uniqueLang, ?sh, ?shape, ?s, ?p, ?o, ?suc, ?vis) as ?b)
}


function sh:sameLang(?x, ?y){
    isLiteral(?y) && datatype(?y) = rdf:langString && lang(?y) = lang(?x) && ?x != ?y
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:and (?shape, ?sh, ?vis, ?s, ?p, ?and, ?o) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
 
    values ?o { unnest(sh:path(?shape, ?s, ?p)) }

    bind (sh:and(sh:hasPath, ?and, ?s, ?p, ?o, ?shape) as ?count)
	bind (! bound(?count) AS ?failure) .
	bind ( IF (?failure, false, ?count)  as ?suc)

    bind (st:report(sh:and, ?sh, ?shape, ?s,  ?suc, ?vis) as ?b)
  
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:minCount (?shape, ?sh, ?vis, ?s, ?p, ?m, ?o){
  sh:safe(?shape, ?sh, ?suc)
}
where {

  bind (xt:size(sh:path(?shape, ?s, ?p)) as ?val) 
  bind (?val >= ?m as ?suc) 

  bind (st:report(sh:minCount, ?sh, ?shape, ?s, ?p, ?val, ?suc, ?vis) as ?b)
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:lessThan(?shape, ?sh, ?vis, ?s, ?p, ?q, ?o){
  sh:safe(?shape, ?sh, ?suc)
}
where {

  ?s ?p ?o ; ?q ?v
  
  bind (coalesce(?o < ?v, false) as ?suc)
    
  bind (st:report(sh:lessThan, ?sh, ?shape, ?s, ?q, ?o, ?suc, ?vis) as ?b)
  
}
 

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls, ?p, ?o) {
  if (bound(?o), 
    st:call-template(?oper, ?shape, ?sh, ?vis, ?s, ?p, ?b, ?o),
    st:call-template(?oper, ?shape, ?sh, ?vis, ?s, ?p, ?b))
}
where {
  graph ?shape {  
    values ?oper { 
      sh:equals sh:maxCount sh:minCount sh:pattern sh:uniqueLang sh:hasValue sh:lessThanOrEquals sh:lessThan sh:disjoint 
      sh:and sh:or sh:not }
    ?sh ?oper ?b    
  }
  
  values ?s { unnest(?ls) }

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls, ?p, ?o) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
    graph ?shape {  
        values ?q { 
            sh:minLength sh:maxLength sh:datatype sh:stem sh:minInclusive sh:minExclusive sh:maxInclusive sh:maxExclusive 
            sh:nodeKind sh:class 
            sh:in sh:languageIn sh:shape
        }
        ?sh ?q ?m    
    }
            
  values ?s { unnest(?ls) }
  values ?o { unnest(sh:path(?shape, ?s, ?p)) }

  bind (
  coalesce(
    if (?q in (sh:in, sh:languageIn, sh:shape), 
        funcall(?q, ?shape, ?o, ?m), funcall(?q, ?o, ?m)), 
    false) 
  as ?suc )
  
  bind (st:report(?q, ?sh, ?shape, ?s, ?p, ?o, ?suc, ?vis) as ?b)
}

]]>
</body>
</rule>

</rdf:RDF>
