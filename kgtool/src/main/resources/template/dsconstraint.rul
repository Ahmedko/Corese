<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Thu Oct 27 18:22:48 CEST 2016
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' 
  xmlns='http://ns.inria.fr/edelweiss/2011/rule#'>
<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:not (?shape, ?sh, ?vis, ?s, ?cst) {
  sh:safe(?shape, ?sh, ?suc)
}
where {

    bind (! sh:hasConstraint(?shape, ?cst, false, ?s) as ?suc)
    
    bind (st:report(sh:not, ?sh, ?shape, ?s,  ?suc, ?vis) as ?b)
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:or (?shape, ?sh, ?vis, ?s, ?or) {
  sh:safe(?shape, ?sh, ?suc)
}
where {

    bind (sh:orcst(?or, ?s, ?shape) as ?count)
	bind (! bound(?count) AS ?failure) .
	bind (IF (?failure, false, ?count)  as ?suc)

    bind (st:report(sh:or, ?sh, ?shape, ?s,  ?suc, ?vis) as ?b)
  
}





]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:pattern (?shape, ?sh, ?vis, ?s, ?exp) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
  graph ?shape {  
    ?sh sh:pattern ?exp   
    optional { ?sh sh:flags ?flag }
  }
  bind ( 
    coalesce(
        ! isBlank(?s) && 
        if (bound (?flag), regex(?s, ?exp, ?flag), regex(?s, ?exp)), 
        false) 
  as ?suc )

  bind (st:report(sh:pattern, ?sh, ?shape, ?s, ?suc, ?vis) as ?b)
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:class (?shape, ?sh, ?vis, ?s, ?c){
  sh:safe(?shape, ?sh, ?suc)
}
where {

  bind (exists { ?s rdf:type/rdfs:subClassOf* ?c } as ?suc)
  bind (st:report(sh:class, ?sh, ?shape,  ?s, rdf:type, ?c, ?suc, ?vis) as ?b)
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:and (?shape, ?sh, ?vis, ?s, ?and) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
  
    bind (sh:andcst(?and, ?s, ?shape) as ?count)
	bind (! bound(?count) AS ?failure) .
	bind (IF (?failure, false, ?count)  as ?suc)

    bind (st:report(sh:and, ?sh, ?shape, ?s,  ?suc, ?vis) as ?b)
  
}





]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template st:profile {}
where {}

function st:aggregate(?x) {
  st:agg_and(?x)
}


function st:optimize(?shape, ?sh){
    true
}








]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:datatype (?shape, ?sh, ?vis, ?s, ?d){
  sh:safe(?shape, ?sh, ?suc)
}
where {
  
  bind (sh:datatype(?s, ?d)  as ?suc)
  
  bind (st:report(sh:datatype, ?sh, ?shape, ?s, sh:datatype, ?d, ?suc, ?vis) as ?b)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls) {
    st:call-template(?q, ?shape, ?sh, ?vis, ?s, ?m)
}
where {
  graph ?shape {  
    values ?q { sh:and sh:or sh:not sh:class sh:datatype sh:pattern }
    ?sh ?q ?m    
  }
  
    values ?s { unnest(?ls) }

}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
  graph ?shape {  
    values ?q { 
        sh:minInclusive sh:minExclusive sh:maxInclusive sh:maxExclusive sh:minLength sh:maxLength sh:nodeKind sh:shape sh:in sh:languageIn sh:stem
    }
    ?sh ?q ?m    
  }
    
    values ?s { unnest(?ls) }
    
  bind (
  coalesce(
    if (?q in (sh:in, sh:languageIn, sh:shape), 
        funcall(?q, ?shape, ?s, ?m), funcall(?q, ?s, ?m)), 
    false) 
  as ?suc )
  
  bind (st:report(?q, ?sh, ?shape, ?s, ?suc, ?vis) as ?b)
}


]]>
</body>
</rule>

</rdf:RDF>
