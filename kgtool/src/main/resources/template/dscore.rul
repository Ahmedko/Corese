<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Thu May 19 16:47:47 CEST 2016
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' 
  xmlns='http://ns.inria.fr/edelweiss/2011/rule#'>
<rule>
<body>
<![CDATA[
template st:profile {}
where {}

function st:aggregate(?x) {
  st:agg_and(?x)
}

# test and do not report error
function st:testShape(?s, ?sh, ?shape){
    st:apply-templates-all(?sh, ?shape, ?s, false)
}





]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?sh, ?shape, ?s, ?vis) {
  sh:safe(?sh, ?shape, ?suc)
}
where {
    GRAPH ?shape {
        ?sh sh:constraint ?sa  ?sa sh:or ?or 
    }
    
    bind (us:or(?or, ?s, ?shape) as ?count)
	bind (! bound(?count) AS ?failure) .
	bind ( IF (?failure, false, ?count > 0)  as ?suc)

    bind (st:report(sh:or, ?sh, ?shape, ?s, ?s, sh:or, sh:or, ?suc, ?vis) as ?b)
  
}

# count success
function us:or(?or, ?s, ?shape){
    let ((?count) = 
        SELECT ?or ?s ?shape (SUM(?val) AS ?count)
		WHERE {
			GRAPH ?shape {
				?or rdf:rest*/rdf:first ?sh
			}
			BIND (st:testShape(?s, ?sh, ?shape) AS ?hasShape) 
			BIND (IF(bound(?hasShape), IF (?hasShape, 1, 0), 'error') AS ?val) .
		})
		{ ?count }
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?sh, ?shape, ?s, ?vis) {
  sh:safe(?sh, ?shape, ?suc)
}
where {
    graph ?shape {
        ?sh sh:inverseProperty ?cst        
        optional { ?cst sh:filterShape ?fs }
        filter (! bound(?fs) || st:testShape(?s, ?fs, ?shape)) 
    }
    
    bind (sh:hasInverseProperty(?s, ?cst, ?shape, ?vis) as ?suc)
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?sh, ?shape, ?s, ?vis) {
  sh:safe(?sh, ?shape, ?suc)
}
where {
    graph ?shape {
        ?sh sh:constraint ?sn 
        ?sn sh:not ?cst        
    }

    bind (! st:testShape(?s, ?cst, ?shape) as ?suc)

    bind (st:report(sh:not, ?sh, ?shape, ?s, ?s, sh:not, sh:not, ?suc, ?vis) as ?b)
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?sh, ?shape, ?s, ?vis) {
  sh:safe(?sh, ?shape, ?suc)
}
where {
    graph ?shape {
        ?sh sh:property ?cst        
        optional { ?cst sh:filterShape ?fs } 
        filter (! bound(?fs) || st:testShape(?s, ?fs, ?shape)) 
   }
   
    bind (sh:hasProperty(?s, ?cst, ?shape, ?vis) as ?suc)
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?sh, ?shape, ?s, ?vis) {
  sh:safe(?sh, ?shape, ?suc)
}
where {
    graph ?shape {
        ?sh sh:constraint sh:Closed  
    }
   
   ?s ?p ?o
   
   bind (
      exists { graph ?shape { ?sh sh:property [ sh:predicate ?p ]} }
   as ?suc)
   
    bind (st:report(sh:closed, ?sh, ?shape, ?s, ?s, ?p, ?o, ?suc, ?vis) as ?b)

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?sh, ?shape, ?s, ?vis) {
  sh:safe(?sh, ?shape, ?suc)
}
where {
    GRAPH ?shape {
        ?sh sh:constraint ?sa  ?sa sh:and ?and 
    }
    
    bind (us:and(?and, ?s, ?shape) as ?count)
	bind (! bound(?count) AS ?failure) .
	bind ( IF (?failure, false, ?count = 0)  as ?suc)

    bind (st:report(sh:and, ?sh, ?shape, ?s, ?s, sh:and, sh:and, ?suc, ?vis) as ?b)
  
}

# count failures
function us:and(?and, ?s, ?shape){
    let ((?count) = 
        SELECT ?and ?s ?shape (SUM(?val) AS ?count)
		WHERE {
			GRAPH ?shape {
				?and rdf:rest*/rdf:first ?sh 
			}
			BIND (st:testShape(?s, ?sh, ?shape) AS ?hasShape) 
			BIND (IF(bound(?hasShape), IF (?hasShape, 0, 1), 'error') AS ?val) .
		})
		{ ?count }
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?sh, ?shape, ?s, ?vis) {
  sh:safe(?sh, ?shape, ?suc)
}
where {
    graph ?shape {
        ?sh sh:constraint ?cst
        ?cst sh:closed true 
        optional { ?cst sh:ignoredProperties ?skip }
    }
   
   ?s ?p ?o
   
   bind (
                     exists { graph ?shape { ?sh sh:property [ sh:predicate ?p ]} }
    ||
    (bound(?skip) && exists { graph ?shape { ?skip rdf:rest*/rdf:first ?p } })
    
   as ?suc)
      
   bind (st:report(sh:closed, ?sh, ?shape, ?s, ?s, ?p, ?o, ?suc, ?vis) as ?b)

}

]]>
</body>
</rule>

</rdf:RDF>
