<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Thu Feb 23 09:12:10 CET 2017
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:not (?shape, ?sh, ?cst, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {

    values ?s { unnest(?ls) }
    bind (! sh:testShapeCore(?shape, ?cst, ?s) as ?suc)
    
    bind (st:report(sh:not, ?sh, ?shape, ?s,  ?suc, ?vis) as ?b)
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:or (?shape, ?sh, ?or, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
    values ?s { unnest(?ls) }

    bind (sh:or(?or, ?s, ?shape) as ?count)  
	bind (! bound(?count) AS ?failure) .
	bind (IF (?failure, false, ?count)  as ?suc)
	
    bind (st:report(sh:or, ?sh, ?shape, ?s,  ?suc, ?vis) as ?b)
  
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:xone (?shape, ?sh, ?or, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
    values ?s { unnest(?ls) }

    bind (sh:xone(?or, ?s, ?shape) as ?count)  
	bind (! bound(?count) AS ?failure) .
	bind (IF (?failure, false, ?count)  as ?suc)
	
    bind (st:report(sh:xone, ?sh, ?shape, ?s,  ?suc, ?vis) as ?b)
  
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:and (?shape, ?sh, ?and, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
    values ?s { unnest(?ls) }
 
    bind (sh:and(?and, ?s, ?shape) as ?count)  
	bind (! bound(?count) AS ?failure) .
	bind (IF (?failure, false, ?count)  as ?suc)
	
    bind (st:report(sh:and, ?sh, ?shape, ?s,  ?suc, ?vis) as ?b)
  
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:profile {}
where {}

function st:aggregate(?x) {
  st:agg_and(?x)
}


function st:optimize(?shape, ?sh){
    true
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# evaluate sh:property sh:path of shape ?sh
# ?list is the list of target nodes of shape ?sh
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?list) {
   sh:safe(?shape, ?sh, ?suc)
}
where {
    graph ?shape {  
        ?sh sh:property ?cst  
        ?cst sh:path ?p 
        filter not exists { ?cst sh:deactivated true }
    }
    
    bind (sh:path(?shape, ?cst, ?vis, ?list, ?p) as ?suc)
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# evaluate sh:qualifiedValueShapesDisjoint 
# list of list of values are recorded in a table
# check that thay are disjoint
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?list) {
    sh:safe(?shape, ?sh, ?suc)
}
where {
    graph ?shape {  
        ?sh sh:qualifiedValueShapesDisjoint true  
        filter not exists { ?sh sh:deactivated true}
    }
        
    bind (sh:disjoint(?shape, ?sh, ?vis) as ?suc)
}
pragma { st:template st:priority 1000 } 


# test disjointness of qualifiedValueShapes of ?sh
function sh:disjoint(?shape, ?sh, ?vis){
    let (?b = true){
        for ((?key, ?val) in st:cget(?sh)){
            if (! sh:disjoint(?key, ?val, ?shape, ?sh, ?vis)) {
                st:report(sh:qualifiedValueShapesDisjoint, ?sh, ?shape, ?key, false, ?vis);
                set(?b = false)
            }
        } ;
        ?b
    }
}

# test disjointness of qualifiedValueShapes of ?key
# list of list of values of  subject ?key
# test whether there is an intersection in any two lists
function sh:disjoint(?key, ?list, ?shape, ?sh, ?vis){
    let (?i = 0){
        for (?l1 in ?list){
            for (?j in xt:iota(?i+1, xt:size(?list) - 1)){
                let (?l2 = xt:get(?list, ?j)) { 
                    if (sh:intersect(?l1, ?l2)) {
                        return (false) 
                    }
                } 
            } ;
            set (?i = ?i + 1)
        } 
    } ;
    return (true)
}

function sh:intersect(?l1, ?l2){
   for (?x in ?l1){
        if (xt:member(?x, ?l2)){
            return(true)
        }
    } ;
    return(false)
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# evaluate sh:path of shape ?sh
# ?list is the list of target nodes of shape ?sh
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?list) {
   sh:safe(?shape, ?sh, ?suc)
}
where {
    graph ?shape {  
        ?sh sh:path ?p 
        filter not exists { ?sh sh:deactivated true}
    }
    
    bind (sh:path(?shape, ?sh, ?vis, ?list, ?p) as ?suc)
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
#  ?ls is the list of target nodes of shape ?sh
#  evaluate sh:constraint
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {

    filter not exists { ?sh sh:path ?p }
        
    bind (sh:hasConstraint(?shape, ?sh, ?vis, ?ls) as ?suc)
  
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# create a table for qualifiedValueShapesDisjoint
# table is used by path/qualified
# it records the list of list of values for each subject
# table is used by core/disjoint2
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?list) {
    true
}
where {
    graph ?shape {  
        ?sh sh:qualifiedValueShapesDisjoint true  
        filter not exists { ?sh sh:deactivated true}
    }
    
    bind (st:cset(?sh, ?sh, xt:list()) as ?init)
    
}
pragma { st:template st:priority 1 } 




]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
#  ?ls is the list of target nodes of shape ?sh
#  evaluate  sh:and sh:or sh:not
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template  (?shape, ?sh, ?vis, ?ls) {
   st:call-template(?bool, ?shape, ?sh, ?cst, ?vis, ?ls)
}
where {
    graph ?shape {  
        values ?bool { sh:and sh:or sh:xone sh:not } 
        ?sh ?bool ?cst
    }
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
#  ?ls is the list of target nodes of shape ?sh
#  evaluate closed sh:constraint
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls) {
   sh:safe(?shape, ?sh, ?suc)
}
where {
  graph ?shape {
    ?sh sh:closed true 
    optional { ?sh sh:ignoredProperties ?skip }
  }

  values ?s { unnest(?ls) }

  ?s ?p ?o
   
   bind (
                     exists { graph ?shape { ?sh sh:property [ sh:path ?p ]} }
    ||
    (bound(?skip) && exists { graph ?shape { ?skip rdf:rest*/rdf:first ?p } })
    
   as ?suc)
   
   bind (st:report(sh:closed, ?sh, ?shape, ?s, ?p, ?o, ?suc, ?vis) as ?b)
    
}

]]>
</body>
</rule>

</rdf:RDF>
