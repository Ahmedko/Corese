<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Thu Oct 27 18:22:48 CEST 2016
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' 
  xmlns='http://ns.inria.fr/edelweiss/2011/rule#'>
<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:not (?shape, ?sh, ?cst, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {

    values ?s { unnest(?ls) }
    bind (! sh:testShapeCore(?shape, ?cst, ?s) as ?suc)
    
    bind (st:report(sh:not, ?sh, ?shape, ?s,  ?suc, ?vis) as ?b)
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:or (?shape, ?sh, ?or, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
    values ?s { unnest(?ls) }

    bind (sh:or(?or, ?s, ?shape) as ?count)  
	bind (! bound(?count) AS ?failure) .
	bind (IF (?failure, false, ?count)  as ?suc)
	
    bind (st:report(sh:or, ?sh, ?shape, ?s,  ?suc, ?vis) as ?b)
  
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:and (?shape, ?sh, ?and, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
    values ?s { unnest(?ls) }
 
    bind (sh:and(?and, ?s, ?shape) as ?count)  
	bind (! bound(?count) AS ?failure) .
	bind (IF (?failure, false, ?count)  as ?suc)
	
    bind (st:report(sh:and, ?sh, ?shape, ?s,  ?suc, ?vis) as ?b)
  
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:profile {}
where {}

function st:aggregate(?x) {
  st:agg_and(?x)
}


function st:optimize(?shape, ?sh){
    true
}

function sh:checkFilter(?ls, ?shape, ?cst){
    mapfindlist(sh:evalFilter, if (isList(?ls), ?ls, xt:list(?ls)), xt:list(?shape), ?cst)
}

function sh:evalFilter(?s, ?shape, ?cst){
    sh:filterShape(?shape, ?cst, ?s)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# evaluate sh:property sh:predicate of shape ?sh
# ?ls is the list of target nodes of shape ?sh
# select target nodes in ?ls that match sh:property filter shape if any
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls) {
   sh:safe(?shape, ?sh, ?suc)
}
where {
    graph ?shape {  
        ?sh sh:property ?cst  
        bind (not exists { ?cst sh:filterShape ?fs } as ?ok)
        values ?oper { sh:predicate sh:path }
        ?cst ?oper ?p 
    }
    bind (if (?ok, ?ls, sh:checkFilter(?ls, ?shape, ?cst)) 
    as ?list)

    bind (funcall(?oper, ?shape, ?cst, ?vis, ?list, ?p) as ?suc)
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
#  ?ls is the list of target nodes of shape ?sh
#  evaluate sh:constraint
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template  (?shape, ?sh, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
   graph ?shape {
        ?sh sh:constraint ?cst 
        bind (not exists { ?cst sh:filterShape ?fs } as ?ok)
   }
   
    bind (if (?ok, ?ls, sh:checkFilter(?ls, ?shape, ?cst)) 
    as ?list)
    
    bind (sh:hasConstraint(?shape, ?cst, ?vis, ?ls) as ?suc)
  
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
#  ?ls is the list of target nodes of shape ?sh
#  evaluate  sh:and sh:or sh:not
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template  (?shape, ?sh, ?vis, ?ls) {
   st:call-template(?bool, ?shape, ?sh, ?cst, ?vis, ?ls)
}
where {
    graph ?shape {  
        values ?bool { sh:and sh:or sh:not } 
        ?sh ?bool ?cst
    }
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
#  ?ls is the list of target nodes of shape ?sh
#  evaluate closed sh:constraint
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls) {
   sh:safe(?shape, ?sh, ?suc)
}
where {
  graph ?shape {
    ?sh sh:closed true 
    optional { ?sh sh:ignoredProperties ?skip }
  }
  
  values ?s { unnest(?ls) }

  ?s ?p ?o
   
   bind (
                     exists { graph ?shape { ?sh sh:property [ sh:predicate ?p ]} }
    ||
    (bound(?skip) && exists { graph ?shape { ?skip rdf:rest*/rdf:first ?p } })
    
   as ?suc)

   bind (st:report(sh:closed, ?sh, ?shape, ?s, ?p, ?o, ?suc, ?vis) as ?b)
    
}

]]>
</body>
</rule>

</rdf:RDF>
