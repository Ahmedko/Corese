<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Thu May 12 08:49:02 CEST 2016
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' 
  xmlns='http://ns.inria.fr/edelweiss/2011/rule#'>
<rule>
<body>
<![CDATA[
#
# Generic template for triples
# Detect if object is a list
#
template st:triple(?in, ?p, ?y) {

  if (?list,
    st:call-template(st:listchoice, ?in, ?p, ?y),
    st:apply-templates(?in, ?p, ?y))
}
where {
     
   bind (isBlank(?y) &&  exists { ?y rdf:rest ?z }
   as ?list)
   
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# select top level terms ?in
# URI
# Top level bnodes (not object of a property)
#
template st:main {
   st:call-template(st:resource, ?in)
   ; separator = "\n\n"
}
where {
   select distinct ?in where {
     bind (st:get(st:uri) as ?in)
     ?in ?p ?y
     
     filter (isURI(?in) || ! exists { ?x ?q ?in } )
     
   }
   order by ?in
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# RDF/XML Transformation
#
# Olivier Corby - Wimmics INRIA I3S - 2015
#

template st:start {

  st:call-template(st:head)
  
  str(?body)
  
  st:call-template(st:tail)
}
where {
   bind(st:call-template(st:main) as ?body )
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# RDF/XML Transformation
#
# Olivier Corby - Wimmics INRIA I3S - 2015
#

template st:result {
  format { 
    """<h3>RDF/XML</h3>
    <pre>%s</pre>"""
    replace(replace(st:call-template(st:start), "&", "&amp;"), "<", "&lt;")
  }
  
}
where {
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:listtriple(?x, ?p, ?y) {
   "<" st:turtle(?p, true) ">"
   
   box {
    st:call-template(st:listrec, ?y) 
   }
   
   "</" st:turtle(?p, true) ">"
}
where {
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:resourceref(?in) {

  "<rdf:Description " ?att "='" str(?name) "' />" 

}
where {
   bind ( if (isBlank(?in), rdf:nodeID, rdf:about) as ?att)
   bind ( if (isBlank(?in), ?in, ?in) as ?name)
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:collection(?x, ?p, ?y) {
   "<" st:turtle(?p, true) " rdf:parseType='Collection'>" 
   
   box {
    st:call-template(st:list, ?y) 
   }
   
   "</" st:turtle(?p, true) ">"
}
where {
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:tail {
  "\n\n"
  "</rdf:RDF>"
  
}
where {

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:resource(?in) {

"<rdf:Description " ?att "='" str(?name) "'>" 

   box {
     st:call-template(st:property, ?in)
   }

"</rdf:Description>" 

}
where {
   bind ( if (isBlank(?in), rdf:nodeID, rdf:about) as ?att)
   bind ( if (isBlank(?in), ?in, ?in) as ?name)
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:blank (?y) {

   st:call-template(st:resource, ?y) 

}
where {
   filter(st:visit(?y))
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:list {

if (isBlank(?e) && ! st:visited(?e),
  st:call-template(st:blank, ?e),
  st:call-template(st:resourceref, ?e))
  
}
where {
  ?in rdf:rest*/rdf:first ?e
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# List that contains a literal rendered with rdf:first/rdf:rest
# otherwise as a Collection
#
template st:listchoice(?in, ?p, ?y) {

    st:call-template(?temp, ?in, ?p, ?y)
    
}
where {
   ?in ?p ?y
   
   bind (
      if (exists { ?y rdf:rest*/rdf:first ?z filter isLiteral(?z) },
	st:listtriple, st:collection)
   as ?temp)
      
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:prefix {

 st:nl()  
 format { 
    "xmlns:%s='%s'"  
    str(?p) str(?n) 
 }
 ; separator = ""

}
where {
  bind( kg:unnest(st:prefix()) as (?p, ?n))
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:listrec(?y) {

   "<rdf:Description>" 
   
   box {
    
   st:call-template(st:triple, ?y, rdf:first, ?f)
   st:nl()
   
   if (?r = rdf:nil, 
      st:apply-templates(?y, rdf:rest, ?r),
      st:call-template(st:listrecrest, ?r))
   
   }
     
   "</rdf:Description>" 
}
where {
  ?y rdf:first ?f ;
     rdf:rest  ?r
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:property {

   st:call-template(st:triple, ?in, ?p, ?y)

}
where {
   ?in ?p ?y   
}
order by ?p ?y

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:head {

"<" st:turtle(rdf:RDF)
  ibox {
    st:call-template(st:prefix)
  }

">\n\n"

}
where {

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:listrecrest(?y) {  
   
   "<rdf:rest>" 
    box {
      st:call-template(st:listrec, ?y)
      }
   "</rdf:rest>" 
   
}
where {
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template (?x, ?p, ?y) {
   "<" st:turtle(?p, true) " rdf:datatype='" datatype(?y) "'>" 
   str(?y) 
   "</" st:turtle(?p, true) ">"
}
where {
   ?x ?p ?y
   filter (isLiteral(?y) 
   && datatype(?y) != rdf:langString
   && datatype(?y) != xsd:string)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template (?x, ?p, ?y) {
   "<" st:turtle(?p, true) ">" 
   str(?y) 
   "</" st:turtle(?p, true) ">"
}
where {
   ?x ?p ?y
   filter (isLiteral(?y) 
   && datatype(?y) = xsd:string)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template (?x, ?p, ?y) {
   "<" st:turtle(?p, true) " xml:lang='" lang(?y) "'>" 
   str(?y) 
   "</" st:turtle(?p, true) ">"
}
where {
   ?x ?p ?y
   filter (isLiteral(?y) && datatype(?y) = rdf:langString)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template (?x, ?p, ?y) {
   "<" st:turtle(?p, true) " rdf:resource='" str(?y) "' />"
}
where {
   ?x ?p ?y
   filter isURI(?y)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template (?x, ?p, ?y) {

  "<" st:turtle(?p, true) ">" 
    box{  
      if (st:visited(?y),
	st:call-template(st:resourceref, ?y),
	st:call-template(st:blank, ?y))
    }
  "</" st:turtle(?p, true) ">"  
  
}
where {
   ?x ?p ?y
   filter (isBlank(?y))
}

]]>
</body>
</rule>

</rdf:RDF>
