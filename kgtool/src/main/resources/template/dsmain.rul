<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Thu Feb 23 09:12:10 CET 2017
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
#
# Data Shape Validator
# http://w3c.github.io/data-shapes/shacl/
#
# main: shapes with targets
# core: shape constraints (property, path, constraint, and, or, not, closed)
# property:   property predicate constraint
# path:       property path constraint
# constraint: node constraint
#
# Olivier Corby - Inria I3S - 2016
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template st:start {
    ?suc
}
where {
  bind (st:visit(st:start, st:trace) as ?vis) 
  bind (coalesce(st:get(st:shape), st:shape) as ?shape)
  bind (sh:start() as ?st)
  
  bind (st:apply-templates(?shape) as ?suc)
  bind (sh:success(?suc) as ?b)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh:  <http://www.w3.org/ns/shacl#> 
prefix doc: <http://w3c.github.io/data-shapes/shacl/#>

template st:profile {}
where {}


function st:aggregate(?x) {
  st:agg_and(?x)
}

#
# Template optimizer
# Results of graph ?shape { ?sh sh:property ?cst } are cached in table: ?sh -> Mappings
# Next evaluations are retrieved from cache: 40% faster
#
function st:optimize(?shape, ?sh){
    true
}

@public {

function sh:test(){
    st:get(st:test, true)
}

function sh:package(?test, ?name){
    if (sh:test(), concat("/user/corby/home/AAData/sttl/datashape/", ?test), ?name)
}

function sh:main(){
    sh:package("main", st:dsmain)
}

function sh:core(){
    sh:package("core", st:dscore)
}

function sh:constraint(){
    sh:package("constraint", st:dsconstraint)
}

function sh:path(){
    sh:package("path", st:dspath)
}


# test and may report error
# main target & noscope
function sh:hasShape(?shape, ?sh, ?vis, ?ls){
    st:apply-templates-with-all(sh:core(), ?shape, ?sh, ?vis, ?ls)
}

# test without target and do not report error
# sh:node  sh:or sh:and sh:not
function sh:testShapeCore(?shape, ?sh, ?s){
    st:apply-templates-with-all(sh:core(), ?shape, ?sh, false, ?s)
}

function sh:hasConstraint(?shape, ?sh, ?vis, ?s){
    st:apply-templates-with-all(sh:constraint(), ?shape, ?sh, ?vis, ?s)
}

function sh:hasPath(?shape, ?sh, ?vis, ?s, ?p){
    st:apply-templates-with-all(sh:path(), ?shape, ?sh, ?vis, ?s, ?p)
}

function sh:hasPath(?shape, ?sh, ?vis, ?s, ?p, ?o){
    st:apply-templates-with-all(sh:path(), ?shape, ?sh, ?vis, ?s, ?p, ?o)
}

function sh:path(?shape, ?sh, ?vis, ?s, ?p){
    st:apply-templates-with-all(sh:path(), ?shape, ?sh, ?vis, ?s, ?p)
}

function sh:safe(?shape, ?sh, ?suc){
    ?suc
}

function st:report(?name, ?s, ?suc, ?vis){
    if (?vis) {
        st:visit(?name, ?s, ?suc)
    }
}

#
# ?suc is success/failure of the shape
# ?vis true means generate a ValidationResult
#
function st:report(?name, ?sh, ?shape, ?foc, ?p, ?o, ?suc, ?vis){
    if (?vis && ! ?suc) { 
        sh:result(?name, ?sh, ?shape, ?foc,  ?p, ?o) ;
        st:visit(?name, ?foc, ?suc)
    }
}

function st:report(?name, ?sh, ?shape, ?foc, ?suc, ?vis){
    if (?vis && ! ?suc) { 
        sh:result(?name, ?sh, ?shape, ?foc,  st:null, st:null) ;
        st:visit(?name, ?foc, ?suc)
    }
}

function sh:value(?v){
    if (?v = st:null, error(), ?v)
}

function sh:result2(?name, ?sh, ?shape, ?foc, ?s, ?p, ?o){
    true
}


#
# create a validation result  graph
# stored in the visitor graph
# get it with st:visitedGraph()
#
function sh:result(?name, ?sh, ?shape, ?foc, ?p, ?o){
    let (?g = 
       construct {
        ?bnode a sh:ValidationReport ; 
            sh:result ?r ; 
            sh:conforms false .
        
        ?r rdf:type sh:ValidationResult ;
            sh:resultSeverity ?sev ;
            sh:focusNode ?foc ;
            sh:focusNodeDetail ?focDetail ;
            sh:resultPath ?pp ; 
            sh:pathDetail ?pathDetail ; 
            sh:value ?oo ;
            sh:valueDetail ?valueDetail ;
            sh:resultMessage ?mes ;
            sh:sourceConstraintComponent ?def
            #?sr ?pr ?or
        } 
        where { 
            bind (uuid() as ?r)
            graph ?shape { 
                # ?sh can be a constraint or a shape
                bind (exists { ?sh sh:severity sh:Warning } as ?warn)
                bind (if (?warn, false, exists { ?sh sh:severity sh:Info }) as ?info)
                bind (if (?warn, sh:Warning, if (?info, sh:Info, sh:Violation)) as ?sev)
                bind (concat("Fail at: ", st:apply-templates-with(st:turtle, ?sh)) as ?mes)
                bind (coalesce(sh:isdefby(?name), ?name) as ?def)
                bind (sh:value(?p) as ?pp)
                bind (sh:value(?o) as ?oo)
                bind (if (bound(?pp),sh:graph(?pp), error())  as ?pathDetail)                
            }
            bind (sh:graph(?foc) as ?focDetail)
            bind (if (bound(?oo), sh:graph(?oo), error())  as ?valueDetail)
            bind (sh:bnode() as ?bnode)
        } 
        values (?name ?sh ?shape ?foc  ?p ?o){ (UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF) }
        ) 
    {
        st:visit(st:trace, st:graph, ?g)
    }
}

function sh:success(?b){
    if (?b){
        let (?g = 
            construct { [] a sh:ValidationReport ; sh:conforms true }
            where { }
            ) {
            st:visit(st:trace, st:graph, ?g)
        }
    }
}

function sh:bnode(){
    coalesce(st:get(sh:bnode), st:set(sh:bnode, bnode()))
}

function sh:graph(?var){
    if (isBlank(?var),  
        strdt(st:apply-templates-with(st:turtle, ?var), xt:graph),
        error())
}


function sh:start(){
    sh:init()
}

function sh:init(){
    map (sh:define, sh:def())
}

function sh:define(?def){
    let ((?name, ?value) = ?def){
        st:cset(sh:def, ?name, ?value)
    }
}

function sh:def(){
    let (?list = @(
        (sh:class       sh:ClassConstraintComponent)
        (sh:datatype    sh:DatatypeConstraintComponent)
        (sh:nodeKind    sh:NodeKindConstraintComponent)
        (sh:minCount    sh:MinCountConstraintComponent)
        (sh:maxCount    sh:MaxCountConstraintComponent)
        
        (sh:minExclusive	sh:MinExclusiveConstraintComponent)
        (sh:minInclusive	sh:MinInclusiveConstraintComponent)
        (sh:maxExclusive    sh:MaxExclusiveConstraintComponent)
        (sh:maxInclusive    sh:MaxInclusiveConstraintComponent)
        (sh:minLength       sh:MinLengthConstraintComponent)
        (sh:maxLength       sh:MaxLengthConstraintComponent)
        (sh:pattern	        sh:PatternConstraintComponent)
        (sh:languageIn      sh:LanguageInConstraintComponent)
        (sh:uniqueLang      sh:UniqueLangConstraintComponent)
        (sh:equals          sh:EqualsConstraintComponent)
        (sh:disjoint        sh:DisjointConstraintComponent)
        (sh:lessThan        sh:LessThanConstraintComponent)
        (sh:lessThanOrEquals sh:LessThanOrEqualsConstraintComponent)
        (sh:not             sh:NotConstraintComponent)
        (sh:and             sh:AndConstraintComponent)
        (sh:or              sh:OrConstraintComponent)
        (sh:xone            sh:XoneConstraintComponent)
        (sh:node            sh:NodeConstraintComponent)
        (sh:qualifiedValueShape sh:QualifiedValueShapeConstraintComponent)
        (sh:closed      sh:ClosedConstraintComponent)
        (sh:hasValue    sh:HasValueConstraintComponent)
        (sh:in          sh:InConstraintComponent)
        
        (sh:sparql      sh:SPARQLConstraintComponent)
    ) ) {
        ?list
    }
} 

function sh:isdefby(?name){
    st:cget(sh:def, ?name)
}


function sh:count(?s, ?p){
  let ((?c) = select ?s ?p (count(*) as ?c) where { ?s ?p ?o } )
  { ?c }
}

function sh:invCount(?o, ?p){
  let ((?c) = select ?o ?p (count(*) as ?c) where { ?s ?p ?o } )
  { ?c }
}


function sh:minCount(?s, ?p, ?m){
    sh:count(?s, ?p) >= ?m
}

function sh:maxCount(?s, ?p, ?m){
    sh:count(?s, ?p) <= ?m
}

function sh:nodeKind(?shape, ?value, ?kind){
    (isIRI(?value)     && ?kind IN ( sh:IRI, sh:BlankNodeOrIRI, sh:IRIOrLiteral ) ) ||
    (isLiteral(?value) && ?kind IN ( sh:Literal, sh:BlankNodeOrLiteral, sh:IRIOrLiteral ) ) ||
    (isBlank(?value)   && ?kind IN ( sh:BlankNode, sh:BlankNodeOrIRI, sh:BlankNodeOrLiteral ) )  
}

function sh:minLength(?shape, ?s, ?m){
    ! isBlank(?s) && coalesce(strlen(?s) >= ?m, false) 
}

function sh:maxLength(?shape, ?s, ?m){
    ! isBlank(?s) && coalesce(strlen(?s) <= ?m, false) 
}

function sh:minInclusive(?shape, ?o, ?m){
    ?o >= ?m
}

function sh:minExclusive(?shape, ?o, ?m){
    ?o > ?m
}

function sh:maxInclusive(?shape, ?o, ?m){
    ?o <= ?m
}

function sh:maxExclusive(?shape, ?o, ?m){
    ?o < ?m
}

function sh:datatype(?shape, ?o, ?d){
    isLiteral(?o) && datatype(?o) = ?d
}

function sh:datatype(?o, ?d){
    isLiteral(?o) && datatype(?o) = ?d
}

function sh:minCount(?s, ?m){
    ?s >= ?m
}

function sh:maxCount(?s, ?m){
    ?s <= ?m
}

function sh:class(?shape, ?o, ?c){
  exists { ?o rdf:type/rdfs:subClassOf* ?c }
}

function sh:in(?shape, ?o, ?lv){
  exists { 
    graph ?shape { ?lv rdf:rest*/rdf:first ?v  
        filter (?o = ?v && ( ! isLiteral(?o) || datatype(?o) = datatype(?v)))
    }
  } 
}

# every lists of values should be disjoint
function sh:disjoint(?sh){
    let (?list = st:cget(?sh)){
    
    }
}

function sh:languageIn(?shape, ?o, ?lv){
  exists { 
    bind (lang(?o) as ?lang)
    filter bound(?lang)
    graph ?shape { 
        ?lv rdf:rest*/rdf:first ?l  
        filter langMatches(?lang, ?l)
    }
  } 
}

# with target ???
function sh:node(?shape, ?o, ?cst){
    sh:testShapeCore(?shape, ?cst, ?o)
}

function sh:qualifiedShape(?subject, ?shape, ?qsh){
    sh:testShapeCore(?shape, ?qsh, ?subject)
}

# used by predicate/path 
# count failure
function sh:and(?and, ?s, ?p, ?o, ?shape){
    (sh:bool(?and, ?s, ?p, ?o, ?shape, 0, 1) = 0)
}

# used by predicate/path 
# count success
function sh:or(?or, ?s, ?p, ?o, ?shape){
    (sh:bool(?or, ?s, ?p, ?o, ?shape, 1, 0)  > 0)
}

# used by predicate/path 
# count success
function sh:xone(?or, ?s, ?p, ?o, ?shape){
    (sh:bool(?or, ?s, ?p, ?o, ?shape, 1, 0)  = 1)
}

# property (predicate or path)
# ?fun = sh:hasPath
function sh:bool(?sh, ?s, ?p, ?o, ?shape, ?suc, ?fail){
    let ((?count) = 
        SELECT ?sh ?s ?p ?o ?shape ?suc ?fail (SUM(?val) AS ?count)
		WHERE {
			GRAPH ?shape {
				?sh rdf:rest*/rdf:first ?cst
			}
			BIND (sh:hasPath(?shape, ?cst, false, ?s, ?p, ?o) AS ?hasShape)
			BIND (IF(bound(?hasShape), IF (?hasShape, ?suc, ?fail), 'error') AS ?val) .
		})
		{ ?count }
}


# used by core
# count fail
function sh:and(?and, ?s, ?shape){
    (sh:bool(?and, ?s, ?shape, 0, 1) = 0)
}

# used by core
# count success
function sh:or(?or, ?s, ?shape){
    (sh:bool(?or, ?s, ?shape, 1, 0) > 0)
}

# used by core
# count success
function sh:xone(?or, ?s, ?shape){
    (sh:bool(?or, ?s, ?shape, 1, 0) = 1)
}

# core
function sh:bool(?sh, ?s, ?shape, ?suc, ?fail){
    let ((?count) = 
        SELECT ?sh ?s ?shape ?suc ?fail (SUM(?val) AS ?count)
		WHERE {
            graph ?shape { 
                ?sh rdf:rest*/rdf:first ?cst
            }			
			BIND (sh:testShapeCore(?shape, ?cst, ?s) AS ?hasShape)
			BIND (IF(bound(?hasShape), IF (?hasShape, ?suc, ?fail), 'error') AS ?val) 
		})
		{ ?count }
}


# used by constraint
# count fail
function sh:andcst(?and, ?s, ?shape){
    (sh:boolcst(?and, ?s, ?shape, 0, 1) = 0)
}

# used by constraint
# count success
function sh:orcst(?or, ?s, ?shape){
    (sh:boolcst(?or, ?s, ?shape, 1, 0) > 0)
}

# used by constraint
function sh:boolcst(?sh, ?s, ?shape, ?suc, ?fail){
    let ((?count) = 
        SELECT ?sh ?s ?shape ?suc ?fail (SUM(?val) AS ?count)
		WHERE {
            graph ?shape { 
                ?sh rdf:rest*/rdf:first ?cst
            }			
			BIND (sh:hasConstraint(?shape, ?cst, false, ?s) AS ?hasShape)
			BIND (IF(bound(?hasShape), IF (?hasShape, ?suc, ?fail), 'error') AS ?val) 
		})
		{ ?count }
}


function sh:disjoint(?l1, ?l2){
    coalesce(
        for (?x in ?l1){
            if (xt:member(?x, ?l2)){
                error() 
            }     
        }, 
        false)
}

function sh:equal(?l1, ?l2){
    if (xt:size(?l1) != xt:size(?l2), false,
    coalesce(
        for (?x in ?l1){
            if (! xt:member(?x, ?l2)){
                error() 
            }     
        }, 
        false) )
}



#
# Data Shape Property Path Interpreter
# PP expressions are searched in graph ?shape 
#
# Olivier Corby - Wimmics Inria I3S - 2016
#


#
# Rewrite Property Path shape expression as a LDScript list
#
# ([sh:zeroOrMorePath rdf:rest] rdf:first)
# ->
# (sh:sequence ((sh:zeroOrMorePath rdf:rest) rdf:first))
# URI may be URI of a subpath such as:
# [sh:path ex:parent] .
# ex:parent sh:alternativePath (ex:father ex:mother)
#
function sh:path(?shape, ?pp) {
  if (isURI(?pp)) { ?pp }
  else {
    let ((?q, ?path) = 
        select ?shape ?pp ?q ?path where {
            graph ?shape { 
                # rdf:rest is for a sequence
                values ?q { 
                    sh:inversePath sh:alternativePath 
                    sh:zeroOrMorePath sh:oneOrMorePath sh:zeroOrOnePath rdf:rest }
                ?pp ?q ?path   
            }
        } ) {
        
        if (! bound(?q))
            { error() }      
        else if (?q = rdf:rest) { xt:list(sh:sequence, sh:list(?shape, ?pp)) }
        else { xt:list(?q, sh:path(?shape, ?path)) }
    }
  }
}


#
# Rewrite recursively RDF list ?pp as a list
#
function sh:list(?shape, ?pp){
   let ( (?l) = 
        select ?shape ?pp (aggregate(sh:path(?shape, ?e)) as ?l)  
        where { graph ?shape { ?pp rdf:rest*/rdf:first ?e }}) {
        ?l
    }
}




#
# Return list of nodes related to node ?s by path ?p
# ?s is subject, ?p is PP expression
# ?s = us:John ; ?p = [sh:zeroOrMorePath foaf:knows]
#
function sh:path(?shape, ?s, ?p){    
    sh:path(?shape, ?s, sh:getPath(?shape, ?p), false)
}


#
# rewrite PP once as a list and record it
#
function sh:getPath(?shape, ?p){
    coalesce(
        st:cget(sh:path, ?p), 
        st:cset(sh:path, ?p, sh:path(?shape, ?p)))
}

#
# Evaluate PP ?p as a list
# Return list of target nodes that match the path
# ?inv = true means within inverse path
#
function sh:path(?shape, ?s, ?p, ?inv){
  if (isURI(?p)){
     sh:property(?s, ?p, ?inv)
  }
  else {
    let ((?oper, ?path) = ?p) {      
      funcall(?oper, ?shape, ?s, ?path, ?inv)
   }
  } 
}



function sh:zeroOrOnePath(?shape, ?s, ?p, ?inv){
    let (?l = sh:path(?shape, ?s, ?p, ?inv)){
        if (xt:member(?s, ?l), ?l, xt:cons(?s, ?l))
    }
}

function sh:zeroOrMorePath(?shape, ?s, ?p, ?inv){
    sh:rec(?shape, ?s, ?p, xt:list(?s), ?inv)
}

function sh:oneOrMorePath(?shape, ?s, ?p, ?inv){
    sh:rec(?shape, ?s, ?p, xt:list(), ?inv)
}

#
# ?p is a PP expression exp
# compute exp*
# ?res is the list of nodes already reached by exp*
# ?res prevents loops
#
function sh:rec(?shape, ?s, ?p, ?res, ?inv){
    let (?l = sh:path(?shape, ?s, ?p, ?inv)){
        if (xt:size(?l) = 0){ ?res }
        else {
            for (?e in ?l){
                if (! xt:member(?e, ?res)){
                    xt:add(?e, ?res) ; 
                    sh:rec(?shape, ?e, ?p, ?res, ?inv)
                }             
            } ;
            ?res             
        }
    }
}


#
# s ^exp
# inverse PP expression
#
function sh:inversePath(?shape, ?s, ?p, ?inv){
    sh:path(?shape, ?s, ?p, ! ?inv)
}


#
# ?p is  a sequence list
#
function sh:sequence(?shape, ?s, ?p, ?inv){
    let (?l = if (?inv, xt:reverse(?p), ?p)) {
        sh:seqlist(?shape, ?s, ?l, ?inv)
    }
}


#
# Recursive traversal of sequence list ?lp
# recurse on xt:rest(?lp)
#
function sh:seqlist(?shape, ?s, ?lp, ?inv){
    if (xt:size(?lp) = 0){
        # reach end of sequence: add target node ?s
        xt:list(?s)
    }
    else {
        let (?l = sh:path(?shape, ?s, xt:first(?lp), ?inv), 
            ?res = xt:list()){
            for (?e in ?l){
                # merge removes duplicate nodes
                set(?res = xt:merge(?res, sh:seqlist(?shape, ?e, xt:rest(?lp), ?inv)))
            } ;
            ?res
        }
    }
}

# ?p = (sh:sequence (exp .. exp))
function sh:alternativePath(?shape, ?s, ?p, ?inv){
    let (?l = xt:get(?p, 1)) {
        mapmerge(sh:path, ?shape, ?s, ?l, ?inv)
    }
}

function sh:property(?s, ?p, ?inv){
    if (?inv) {
        sh:inverse(?s, ?p)
    }
    else {
        sh:predicate(?s, ?p)    
    }
}

function sh:predicate(?s, ?p){
    let ((?l) = select ?s ?p (aggregate(?o) as ?l) where  { ?s ?p ?o }){
        ?l
    }
}

function sh:inverse(?o, ?p){
    let ((?l) = select ?o ?p (aggregate(?s) as ?l) where  { ?s ?p ?o }){
        ?l
    }
}





}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Select target nodes
# for each shape ?sh, aggregate target nodes in ?list
# call sh:hasShape for each shape ?sh with list of target nodes ?list
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape) {
  ?suc
}
where {

  {
   select  ?s ?shape ?sh  (aggregate(distinct ?s) as ?list) 
   where { 
  
    {graph ?shape {
        ?sh sh:targetSubjectsOf ?p 				
        filter not exists { ?sh sh:deactivated true} }
        
     ?s ?p ?o}
    
    union
    
    {graph ?shape {
        ?sh sh:targetObjectsOf ?p 				
        filter not exists { ?sh sh:deactivated true} }
        
     ?x ?p ?s}
    
    union 
    
    {graph ?shape {
        ?sh sh:targetClass ?c 
        filter not exists { ?sh sh:deactivated true} }
        
     ?s rdf:type/rdfs:subClassOf* ?c}
     
     union 
    
    {graph ?shape {
        ?sh a sh:NodeShape, rdfs:Class
        filter not exists { ?sh sh:deactivated true} }
        
     ?s rdf:type/rdfs:subClassOf* ?sh} 
     
    union 
     
    {graph ?shape {
        ?sh sh:targetNode ?s
        filter not exists { ?sh sh:deactivated true} }
    }
                      
  } group by ?sh
  }
  #filter xt:display("target: ", ?list) 
  filter (xt:size(?list) > 0)
  bind (sh:hasShape(?shape, ?sh, true, ?list) as ?suc)

}



]]>
</body>
</rule>

</rdf:RDF>
