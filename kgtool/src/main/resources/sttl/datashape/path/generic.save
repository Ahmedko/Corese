#
# [] a sh:NodeShape ; sh:property ?sh . 
# ?sh sh:path ?p ; ?q ?m .
# ?ls = list of subjects of path ?p
#
# ?o may be bound in the boolean cases:
# ?sh sh:path ?p ; sh:or ([sh:class C1][sh:class C2])
#
# template sh:or enumerate objects of path and 
# for each object o : check the or 
# the or evaluates its elements by coming back here with ?o bound
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls, ?p, ?o) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
    graph ?shape {  
        values ?q { 
            sh:minLength sh:maxLength sh:datatype sh:minInclusive sh:minExclusive sh:maxInclusive sh:maxExclusive 
            sh:nodeKind sh:class 
            sh:in sh:languageIn sh:shape
        }
        ?sh ?q ?m    
    }
            
  values ?s { unnest(?ls) }
  values ?o { unnest(sh:path(?shape, ?s, ?p)) }

  bind (coalesce(funcall(?q, ?shape, ?o, ?m), false) as ?suc )
  
  bind (st:report(?q, ?sh, ?shape, ?s, ?p, ?o, ?suc, ?vis) as ?b)
}
